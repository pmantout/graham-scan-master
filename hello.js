/**
 * Created by pmantout on 15/08/2014.
 */

window.onload = function () {

    // screen size
    var SCREEN_WIDTH = 800;
    var SCREEN_HEIGHT = 600;

    // height of interface
    var INTERFACE_HEIGHT = 120;

    // bitmapdata that contains lines and circles
    var gBmd;

    // array of array, that contains the animation of the Graham scan (use in subroutine grahamScan)
    // example : [ [[x1, y1], [x2, y2]], [[x1, y1], [x4, y4], [x5, y5]], …]
    // the first array contains 1 line [pt1, Pt2]
    // the second array contains 2 lines [pt1, Pt4], [pt4, Pt5]
    // the first point of each array is always the same here [x1, y1], it is P0 (see graham algorithm)
    var gArrayAnim = [];

    // animation number for the graham animation
    var gNumGrahamAnim = 0;

    // array of arrays that contains all the points to draw on screen
    // for array n
    //   gArrayPoints[n][0] --> x coord
    //   gArrayPoints[n][1] --> y coord
    //   gArrayPoints[n][2] --> 0:ghost 1:ghostbuster
    //   gArrayPoints[n].id --> unique id of the point
    //   gArrayPoints[n].fl --> flag
    //                          0: not connected
    //                          1: just connected (current scan)
    //                          2: old connection (previous scans)
    //                          3: 1 subset : points removed from plane and waiting futur scan
    //                          4: 2 subset :   "        "     "    "    "     "      "     "
    //                          5: 3 subset : (and so on)
    //
    // Important: this array is never sorted, so point with id = n is placed in gArrayPoints[n]
    var gArrayPoints = [];

    // array of arrays that contains all the points connected by a grey line when showing Graham animation
    var gArrayPtsGreyLine = [];

    // array of arrays that contains the connection between ghost and goshbuster by id [ [1, 5, 1], [2, 4, 1], …
    // for the sub-array [id for 1 point, id for 2 point, 1 --> it is the last grahamScan 0 --> it is an old scan]
    // it contains the solution of all the problem
    var gLineConnection = [];

    // array that contains the Y value of all the horizontal lines that cut the planes [Y1, Y2, Y3, …]
    var gLinesCut = [];

    // each time, we cut the plane, we have 2 subsets, the current one (bigger Y) and the other one
    // we wait to finish the first one to calculate the second one
    // when we finish to find all the connections for a subset gSubSet--
    // during a scan, if we need to cut the plane another time gSubset++
    var gCurrentSubset = 0;

    // the delay in ms, between each animation, smaller = faster
    var gDelay = 0;

    // num for a simple animation
    var gNumAnim = 0;


    // -- interface and buttons --

    // bt of the slider (speed fast/slow)
    var gBtSlider; // Phaser.Sprite
    var gPosSlider = new Phaser.Point(100, 70); // default position of the slider
    var gLengthSlider = 300; // length of the slider

    // texts 'Click to add …
    var gTextGhost; // sprite 'Click to add a ghost!'
    var gTextBuster; // sprite 'Click to add a ghostbuster'

    // array of all the buttons
    var gBtsArray = [];

    // visibility or not of the button
    // 1: all the buttons are visible
    // 2: bts Go, Rand, Ring, Import, Export are invisible, others buttons visible
    // 3: all bts are invisible (during calculation)
    var gEnableBts = 1;


    var game = new Phaser.Game(SCREEN_WIDTH, SCREEN_HEIGHT, Phaser.AUTO, '', { preload: preload, create: create});

    function preload() {
        game.time.advancedTiming = true;

        // loading spritesheet of the classic button
        game.load.spritesheet('button', 'assets/bts.png', 50, 30);
        // loading spritesheet of the Led button
        game.load.spritesheet('buttonLed', 'assets/btsLed.png', 50, 30);
        // loading background with texts
        game.load.image('bgInterface', 'assets/bgInterface.png');
        // loading button of the slider
        game.load.image('btSlider', 'assets/btSlider.png');
        // loading texts Click to add a ghost or a ghostbuster
        game.load.image('clickGhost', 'assets/clickGhost.png');
        game.load.image('clickBuster', 'assets/clickBuster.png');
    }


    function create() {
        // creating background
        var gBackground = game.add.sprite(0, 0, 'bgInterface');

        // coords and shift of the first buttons group
        var firstBtsX = 16;
        var firstBtsY = 28;
        var shiftBts = 60;

        // X of the second buttons group
        var secondBtsX = 496;

        // array of all the buttons
        gBtsArray = [];

        // 1 button Go
        // coord X, coord Y, callback, context, overFrame, outFrame, downFrame, upFrame
        gBtsArray[0] = game.add.button(firstBtsX, firstBtsY, 'buttonLed', clickButton, this, 0, 0, 1, 0);
        gBtsArray[0].name = 'btGo';

        // 2 button Reset
        gBtsArray[1] =  game.add.button(firstBtsX + shiftBts, firstBtsY, 'button', clickButton, this, 0, 0, 1, 0);
        gBtsArray[1].name = 'btReset';

        // 3 button Rand
        gBtsArray[2] =  game.add.button(firstBtsX + 2*shiftBts, firstBtsY, 'button', clickButton, this, 0, 0, 1, 0);
        gBtsArray[2].name = 'btRand';

        // 4 button Import
        gBtsArray[3] =  game.add.button(firstBtsX + 3*shiftBts, firstBtsY, 'button', clickButton, this, 0, 0, 1, 0);
        gBtsArray[3].name = 'btImport';

        // 5 button Export
        gBtsArray[4] =  game.add.button(firstBtsX + 4*shiftBts, firstBtsY, 'button', clickButton, this, 0, 0, 1, 0);
        gBtsArray[4].name = 'btExport';

        // second group of button (top right)
        // Test buttons 1 --> 5
        gBtsArray[5] =  game.add.button(secondBtsX, firstBtsY, 'button', clickButton, this, 0, 0, 1, 0);
        gBtsArray[5].name = 'btTest1';
        gBtsArray[6] =  game.add.button(secondBtsX + shiftBts, firstBtsY, 'button', clickButton, this, 0, 0, 1, 0);
        gBtsArray[6].name = 'btTest2';
        gBtsArray[7] =  game.add.button(secondBtsX + 2*shiftBts, firstBtsY, 'button', clickButton, this, 0, 0, 1, 0);
        gBtsArray[7].name = 'btTest3';
        gBtsArray[8] =  game.add.button(secondBtsX + 3*shiftBts, firstBtsY, 'button', clickButton, this, 0, 0, 1, 0);
        gBtsArray[8].name = 'btTest4';
        gBtsArray[9] =  game.add.button(secondBtsX + 4*shiftBts, firstBtsY, 'button', clickButton, this, 0, 0, 1, 0);
        gBtsArray[9].name = 'btTest5';

        // Text click to add a ghost or a ghostbuster
        gTextGhost = game.add.sprite(20, 97, 'clickGhost');
        gTextBuster = game.add.sprite(20, 97, 'clickBuster');
       // show Click to add a ghost
        chooseText(1);

        // Slider Speed (fast/slow)
        gBtSlider = game.add.sprite(gPosSlider.x, gPosSlider.y, 'btSlider');

        //  Input Enable the sprites
        gBtSlider.inputEnabled = true;

        //  Allow dragging - the 'false' parameter will make the sprite snap to the point clicked, not to the center
        gBtSlider.input.enableDrag(false);

        // define an horizontal bound rect
        gBtSlider.input.allowVerticalDrag = false;
        gBtSlider.input.boundsRect = new Phaser.Rectangle(gPosSlider.x, gPosSlider.y, gLengthSlider + gBtSlider.width, gBtSlider.height);

        // attach a script to the button slider
        gBtSlider.events.onInputUp.add(computeSpeed, this);

        // initialisation of the background
        game.stage.backgroundColor = '#FFFFFF';

        // we create and add the bitmapData
        gBmd = game.add.bitmapData(SCREEN_WIDTH, SCREEN_HEIGHT - INTERFACE_HEIGHT);
        game.add.sprite(0, INTERFACE_HEIGHT, gBmd);


        // Phaser.Sprite which supports events for mouseClick (add a ghost or a buster with a mouse click)
        var spriteForClick = game.add.sprite(0, INTERFACE_HEIGHT, game.add.bitmapData(SCREEN_WIDTH, SCREEN_HEIGHT - INTERFACE_HEIGHT));
        spriteForClick.inputEnabled = true;
        spriteForClick.events.onInputUp.add(onClickUpScreen, this);

        // to draw buttons
        showButtons(1);

        // to draw the border around gBmd
        gBmd.clear();
        drawPoints(gArrayPoints);
        gBmd.dirty = true;
    }

    /**
     * Add a ghost or a ghostbuster on the stage
     *
     * @param {number} num - load example number 'num'
     */
    function onClickUpScreen() {
        // I can create ghost or ghostbuster only when gEnableBts == 1 or gEnableBts == 2
        if (gEnableBts != 3) {
            if (gArrayPoints.length % 2 == 0) {
                var guy = 0; // number of points is even, so this points is a ghost
            } else {
                guy = 1;   // number of points is odd, so this point is a ghostbuster
            }

            // we put a little random, to avoid to have 2 points at the same place
            var deltaX = Math.round(Math.random()*100)/100;
            var deltaY = Math.round(Math.random()*100)/100;

            // add a point to the general description
            gArrayPoints.push([deltaX + game.input.activePointer.position.x, deltaY + invY(game.input.activePointer.position.y - INTERFACE_HEIGHT), guy]);

            // we reset all the flags
            for (i = 0; i < gArrayPoints.length; i++) {
                gArrayPoints[i].id = i; // unique id
                gArrayPoints[i].fl = 0; // 0 we do not have a couple yet. 1 we have a connection
            }

            // show/hide buttons
            if (guy == 0) {
                showButtons(2); // the next point is a ghostbuster
            } else {
                showButtons(1); // the next point is a ghost
            }

            // we reset the other global value
            resetGlobalValues();
            gBmd.clear();
            drawPoints(gArrayPoints);
            gBmd.dirty = true;
        }
    }


    /**
     * Load the array of points for an example with a good delay for animation
     *
     * @param {number} num - load example number 'num' 1 --> 5
     */
    function chooseExample(num) {

        switch(num) {
            case 1 :
                // 20 points
                gArrayPoints = [[660,172,1],[591,201,0],[628,146,0],[631,112,0],[504,156,0],[503,114,1],[359,98,0],[322,28,0],[307,105,1],[269,95,1],[384,272,0],[278,14,1],[286,200,0],[53,87,1],[286,281,1],[218,263,0],[156,282,1],[56,305,1],[187,367,1],[463,374,0]];
                gDelay = 300;
                break;

            case 2 :
                // 12 points coupure
                gArrayPoints = [[443,363,0], [209,346,0], [350,332,0], [305,332,0], [342,322,1], [326,317,1], [335,309,1], [335,293,0], [377,269,1], [281,242,1], [335,163,1], [335,51,0] ];
                gDelay = 300;
                break;

            case 3 :
                // 28 points
                gArrayPoints = [[324,55,0], [470,94,0], [193,129,0], [337,135,0], [375,155,1], [300,165,1], [443,182,0], [373,197,1], [434,201,1], [315,203,1], [243,203,0], [254,224,1], [544,225,0], [407,244,1], [291,256,1], [154,275,0], [444,276,1], [455,297,0], [383,297,1], [264,299,1], [325,303,1], [255,318,0], [398,335,1], [323,345,1], [361,365,0], [505,371,0], [228,406,0], [374,445,0] ];
                gDelay = 200;
                break;

            case 4 :
                // 170 points
                gArrayPoints = [[230,321,0], [203,211,1], [666,222,0], [349,317,1], [701,156,0], [582,190,1], [685,317,0], [160,398,1], [708,152,0], [364,282,1], [680,354,0], [347,425,1], [129,239,0], [463,137,1], [552,414,0], [256,403,1], [484,327,0], [447,233,1], [458,288,0], [171,256,1], [112,130,0], [489,268,1], [520,273,0], [625,383,1], [524,133,0], [301,124,1], [91,347,0], [505,363,1], [403,239,0], [589,349,1], [710,157,0], [690,194,1], [301,252,0], [598,369,1], [298,134,0], [579,103,1], [386,340,0], [273,119,1], [543,185,0], [541,149,1], [324,283,0], [630,157,1], [462,246,0], [213,303,1], [107,182,0], [107,290,1], [671,98,0], [515,306,1], [630,288,0], [182,295,1], [474,353,0], [461,291,1], [641,275,0], [298,194,1], [340,98,0], [597,113,1], [305,423,0], [622,272,1], [691,249,0], [274,328,1], [156,422,0], [344,103,1], [416,158,0], [514,428,1], [96,237,0], [599,209,1], [593,420,0], [137,148,1], [87,125,0], [163,387,1], [367,237,0], [675,204,1], [101,222,0], [552,358,1], [695,366,0], [666,95,1], [122,101,0], [547,204,1], [543,153,0], [678,229,1], [267,353,0], [361,160,1], [144,229,0], [547,427,1], [265,109,0], [326,319,1], [429,297,0], [465,348,1], [684,75,0], [486,223,1], [211,132,0], [493,150,1], [658,346,0], [157,297,1], [214,247,0], [570,242,1], [264,335,0], [92,304,1], [601,73,0], [178,266,1], [371,79,0], [697,204,1], [398,188,0], [295,249,1], [122,355,0], [455,134,1], [429,149,0], [202,423,1], [679,290,0], [129,298,1], [378,386,0], [417,271,1], [673,350,0], [406,350,1], [698,268,0], [392,204,1], [161,372,0], [230,324,1], [602,366,0], [581,388,1], [675,246,0], [712,189,1], [553,317,0], [196,153,1], [417,110,0], [161,356,1], [131,312,0], [489,343,1], [650,89,0], [364,409,1], [362,113,0], [186,306,1], [122,392,0], [272,173,1], [673,243,0], [206,335,1], [253,218,0], [268,204,1], [526,354,0], [124,276,1], [120,420,0], [357,428,1], [674,75,0], [376,191,1], [479,252,0], [196,114,1], [457,273,0], [113,373,1], [400,81,0], [290,230,1], [241,112,0], [602,258,1], [93,171,0], [392,353,1], [118,94,0], [674,358,1], [414,155,0], [510,385,1], [470,351,0], [255,217,1], [253,199,0], [607,170,1], [247,160,0], [137,124,1], [626,210,0], [381,149,1], [631,344,0], [530,82,1], [300,125,0], [148,195,1] ];
                gDelay = 20;
                break;

            case 5 :
                // 2000 points
                gArrayPoints = [ [592.53,65.45,0],[331.77,58.6,1],[610.13,338.87,0],[462.57,378.12,1],[203.49,31.36,0],[595.7,447.77,1],[191.03,39.01,0],[201.22,209.93,1],[369.06,418.95,0],[669.59,175.24,1],[539.32,460.08,0],[760.35,311.15,1],[777.65,322.38,0],[276.34,115.16,1],[660.82,98.16,0],[126.11,192.31,1],[72.4,351.14,0],[145.78,150.84,1],[741.86,358.51,0],[40.87,339.02,1],[189.54,208.84,0],[634.36,246.71,1],[118.44,77.7,0],[161.9,105.77,1],[424.1,441.47,0],[295.38,402.96,1],[35.07,297.71,0],[737.59,68.75,1],[356.53,390.49,0],[151.12,405.73,1],[489.39,106.8,0],[634.42,272.44,1],[670.52,355.02,0],[409.35,379.18,1],[619,59,0],[605.65,130.47,1],[190.89,257.97,0],[240.56,309.08,1],[174.44,159.38,0],[22.43,471.27,1],[588.74,156.18,0],[647.14,22.06,1],[438.39,139.08,0],[609.26,325.91,1],[592.91,337.99,0],[224.46,92.32,1],[603.71,191.16,0],[512.23,90.39,1],[681.09,82.66,0],[496.48,462.48,1],[279.14,7.18,0],[463.51,167.31,1],[402.57,468.31,0],[793.15,162.91,1],[338.19,373.93,0],[520.9,25.34,1],[736.97,228.35,0],[533.97,99.93,1],[557.38,287.81,0],[49.18,31.89,1],[42.45,25.14,0],[535.7,114.06,1],[211.69,370.88,0],[90.52,95.93,1],[192.88,251.14,0],[242.73,395.67,1],[585.21,278.27,0],[407,183.58,1],[681.09,108.65,0],[637.74,251.99,1],[509.01,367.75,0],[74.79,158.45,1],[589.43,18.65,0],[643.37,325.94,1],[693.51,236.97,0],[637.4,378.45,1],[114.69,117.7,0],[381.63,174.43,1],[58.41,272.43,0],[289.64,17.36,1],[190.77,325.96,0],[438.13,160.77,1],[168.49,240.7,0],[702.13,381.96,1],[625.45,140.04,0],[157.71,108.72,1],[324.52,271.29,0],[670.5,223.65,1],[18.04,258,0],[283.45,335.07,1],[327.67,227.72,0],[786.01,65.88,1],[741.69,380.16,0],[648.5,191.8,1],[599.08,186.77,0],[5.18,10.35,1],[576.83,273.02,0],[326.41,80.46,1],[714.44,186.48,0],[706.5,466.98,1],[197.52,47.77,0],[553.72,45.95,1],[224.52,196.12,0],[584.18,363.62,1],[630.02,451.82,0],[623.62,111.39,1],[235.19,101.15,0],[220.38,382.33,1],[664.93,340.8,0],[480.71,204.7,1],[239.54,96.26,0],[96.88,122.29,1],[729.99,180.09,0],[369.52,220.42,1],[352.23,309.97,0],[659.16,59.01,1],[47.13,119.02,0],[602.62,23.31,1],[612.83,73.6,0],[355.37,31.31,1],[676.15,386.84,0],[302.38,255.1,1],[643.31,206.64,0],[287.74,443.55,1],[145.91,208.12,0],[145.39,147.45,1],[263.91,316.71,0],[709.14,401.58,1],[518.42,428.37,0],[217.13,340.81,1],[6.39,129.07,0],[300.72,428.72,1],[459.42,39.84,0],[547.46,180.24,1],[204.31,88.44,0],[151.84,194.34,1],[226.48,448.19,0],[664.34,386.81,1],[208,296.49,0],[469.77,111.48,1],[685.8,98,0],[27.12,332.57,1],[231.95,161.12,0],[634.28,125.02,1],[273.03,212.15,0],[512.77,14.41,1],[791.94,430.58,0],[196.8,295.84,1],[172,343.1,0],[740.21,318.65,1],[275.06,323.12,0],[704.1,276.68,1],[520.02,301.78,0],[376.64,153.25,1],[777.51,115.78,0],[214.11,391.86,1],[313.14,251.66,0],[776.31,329.55,1],[136.8,405.7,0],[394.31,67.44,1],[461.52,181.33,0],[261.24,34.73,1],[428.83,92.17,0],[775,231.98,1],[611.62,187.07,0],[570.04,332.72,1],[269.01,341.34,0],[300.63,40.58,1],[60.82,463.51,0],[56.39,427.1,1],[600.36,43.38,0],[160.29,395.87,1],[409.8,200.36,0],[465.92,110.62,1],[322.23,282.85,0],[246.46,139.15,1],[388.45,224.17,0],[219.17,340.86,1],[538.59,32.38,0],[367.6,361.69,1],[346.49,10.89,0],[602.32,6.97,1],[706.04,6.09,0],[281.37,153.65,1],[446.1,385.98,0],[96.01,36.62,1],[294.53,385.73,0],[23.99,180.52,1],[528.65,104.76,0],[718.71,185.02,1],[12.45,71.33,0],[451.84,231.5,1],[773.37,308.41,0],[157.55,201.01,1],[249.68,325.94,0],[363.47,275.39,1],[276.3,47.87,0],[499.48,183.53,1],[175.25,444.54,0],[491.92,377.53,1],[539.73,272.09,0],[120.85,313.17,1],[85.45,368.96,0],[272.74,425.03,1],[202.41,131.24,0],[737.43,198.72,1],[454.98,29.29,0],[427.82,362.69,1],[391.21,85.27,0],[583.97,323.86,1],[788.4,190.03,0],[741.19,211.84,1],[651.67,300.29,0],[417.01,49.95,1],[427.26,450.28,0],[608.87,318.12,1],[748.67,186.82,0],[229.06,159.16,1],[319.26,357.72,0],[183.25,427.41,1],[407.11,464.58,0],[13.57,247.71,1],[193.55,112.1,0],[592.08,166.11,1],[783.2,403.65,0],[207.36,274.63,1],[14.33,329.67,0],[729.22,310.89,1],[739.21,373.8,0],[397.57,191.29,1],[689.89,365.26,0],[541.52,393.66,1],[392.41,38.62,0],[212.74,470.96,1],[650.16,441.64,0],[684.65,299.53,1],[777.5,156.57,0],[744.41,281.07,1],[247.01,395.78,0],[730.47,197.19,1],[145.34,90.22,0],[32.3,149.65,1],[485.25,206.2,0],[457.42,313.96,1],[139.36,322.31,0],[485.93,72.99,1],[336.7,79.01,0],[242.33,122.07,1],[482.42,422.42,0],[662.29,191.6,1],[535.07,396.02,0],[399.99,217.98,1],[298.37,410.35,0],[405.14,249.13,1],[466.35,141.92,0],[154.32,283.93,1],[280.55,249.92,0],[741.14,43.3,1],[146.57,123.08,0],[483.64,28.47,1],[384.66,273.44,0],[628.8,350.9,1],[362.25,206.58,0],[247.48,315.85,1],[342.05,51.69,0],[781.9,449.69,1],[245.8,28.07,0],[53.45,290.18,1],[138.33,456.67,0],[79.62,93.17,1],[705.57,89.28,0],[563.02,44.93,1],[328.38,358.61,0],[639.37,153.05,1],[213.18,50.57,0],[353.72,401.41,1],[93.09,418.55,0],[107.47,252.65,1],[86.07,116.55,0],[460.03,56.21,1],[765.7,103.51,0],[727.15,136.67,1],[148.76,160.75,0],[216.99,234.68,1],[327.87,77.53,0],[684.06,17.74,1],[345.36,286.55,0],[152.67,361.83,1],[172.26,424.55,0],[205.98,381.07,1],[253.8,413.24,0],[681.86,99.71,1],[90.22,34.14,0],[709.2,169.08,1],[147.71,387.63,0],[115.1,345.87,1],[208.62,388.48,0],[54.04,231.98,1],[410.61,343.78,0],[402.46,278.09,1],[379.27,44.94,0],[717.69,309.32,1],[686.68,319.62,0],[766.7,243.87,1],[48.37,38.42,0],[269.23,268.13,1],[115.92,293.76,0],[260.9,25.7,1],[618.01,24.57,0],[105.06,122.31,1],[603.09,435.06,0],[353.43,183.49,1],[392.91,182.96,0],[693.87,368.52,1],[215.59,470.08,0],[637.91,307.42,1],[752.67,451.52,0],[96.45,203.64,1],[712.33,317.56,0],[186.39,309.53,1],[606.4,335.25,0],[614.75,448.14,1],[590.44,166.35,0],[721.41,285.71,1],[776.1,461.24,0],[170.25,187.38,1],[438.63,456.11,0],[582.5,419.5,1],[309.96,442.91,0],[298.01,170.6,1],[340.74,428.09,0],[46.75,389.46,1],[166.02,229.79,0],[409.22,312.74,1],[599.87,278.56,0],[531.92,395.9,1],[604.51,464.92,0],[151.35,96.38,1],[436.63,296.9,0],[669.22,308.74,1],[211.24,145.37,0],[393.73,153.54,1],[113.1,146.76,0],[218.64,193.19,1],[551.77,6.85,0],[107.34,445.29,1],[691.43,159.08,0],[395.19,165.12,1],[350.93,110.4,0],[792.04,226.77,1],[279.74,383.82,0],[677.83,370.69,1],[372.91,437.84,0],[783.8,451.77,1],[134.88,152.22,0],[591.09,241.43,1],[157.32,42.43,0],[191.01,133.9,1],[294.74,290.65,0],[523.49,316.22,1],[23.09,202.6,0],[132.32,30.73,1],[372.29,239.64,0],[328.6,421.74,1],[453.94,101.42,0],[531.4,351.48,1],[576.76,51.85,0],[603.84,211.4,1],[386.58,10.95,0],[446.2,454.57,1],[626.38,380.92,0],[265.05,141.29,1],[684.62,423.69,0],[206.61,145.29,1],[339.45,28.98,0],[183.7,14.49,1],[753.16,441.73,0],[416.88,57.87,1],[286.24,471.17,0],[738.51,206.7,1],[716.73,210.65,0],[419.88,194.19,1],[415.54,351.56,0],[597.43,137.84,1],[687.03,181.12,0],[476.54,407.85,1],[210.29,291.32,0],[665.4,125.22,1],[129.29,355.27,0],[637.65,212.37,1],[332.84,12.76,0],[639.47,165,1],[624.42,220.53,0],[567.37,389.57,1],[455.24,145.54,0],[218.26,360.39,1],[156.1,130.88,0],[770.98,183.01,1],[540.91,370.48,0],[266.87,186.51,1],[672.8,188.99,0],[149.42,201.89,1],[480.74,428.07,0],[214.97,383.28,1],[729.46,465.74,0],[17.05,50.68,1],[663.37,132.19,0],[141.98,169.92,1],[701.51,258.81,0],[84.62,372.6,1],[559.82,176.41,0],[293.13,263.23,1],[347.33,95.69,0],[675.27,238.34,1],[44.05,121.98,0],[723.62,416.03,1],[388.22,30.44,0],[672.27,19.39,1],[444.36,277.75,0],[87.95,356.91,1],[508.15,22.64,0],[71.58,322.62,1],[458.68,345.33,0],[594.38,220.12,1],[423.28,22.14,0],[428.95,459.13,1],[93.83,307.47,0],[562.86,282.15,1],[277.3,116.67,0],[528.23,200.31,1],[537.04,139.15,0],[469.48,212.48,1],[430.01,294.36,0],[681.22,171.05,1],[104.66,68.6,0],[294.36,439.98,1],[262.88,408.22,0],[324.53,15.84,1],[333.35,291.95,0],[113.27,140.01,1],[713.82,99.68,0],[8.05,155.3,1],[251.91,116.93,0],[330.63,444.51,1],[444.16,48.48,0],[309.31,312.91,1],[108.24,19.17,0],[568.71,309.66,1],[727.88,198.03,0],[636.3,192.29,1],[564.1,117.9,0],[354.51,139.31,1],[524.54,56.18,0],[692.6,203.22,1],[302.29,226.58,0],[515.87,327.57,1],[99.44,238.79,0],[330.55,162.21,1],[742.67,211.84,0],[652.08,55.9,1],[607.33,15.17,0],[246.73,127.55,1],[500.57,381.05,0],[244.85,466.2,1],[769.55,191.88,0],[685.81,251.47,1],[462.91,263.07,0],[288.7,133.06,1],[620.29,382.43,0],[130.51,32.75,1],[647.89,122.57,0],[214.46,434.12,1],[399.32,409.96,0],[168.39,201.81,1],[433.04,415.28,0],[88.76,245.42,1],[37.84,314.64,0],[187.82,393.33,1],[651.6,165.65,0],[132.46,51.96,1],[403.75,118.77,0],[322.85,388.53,1],[47.78,368.49,0],[734.36,217.83,1],[505.92,180.14,0],[48.67,6.84,1],[96.25,201.85,0],[154.56,101.59,1],[774.15,330.25,0],[392.75,400.27,1],[410.65,444.9,0],[511.1,193.75,1],[214.17,128.83,0],[199.71,304.07,1],[464,453.03,0],[673.11,380.53,1],[13.19,260.76,0],[556.38,265.73,1],[665.25,425.52,0],[280.27,95.31,1],[42.21,372.93,0],[190.18,244.84,1],[394.18,461.07,0],[307.26,239.93,1],[431.3,224.06,0],[656.78,407.71,1],[25.4,9.17,0],[8.05,261.11,1],[67.94,423.9,0],[102.51,312.69,1],[332.19,14.18,0],[12.91,434.53,1],[478.83,467.47,0],[322.72,115.28,1],[468.36,238.43,0],[479.88,63.91,1],[121.85,322.04,0],[10.76,92.92,1],[86.88,392.17,0],[489.59,319.77,1],[27.7,104.67,0],[655.25,181.42,1],[239.06,356.84,0],[717.56,25.82,1],[319.67,207.19,0],[788.63,297.39,1],[166.05,127.26,0],[357.25,279.63,1],[324.89,151.4,0],[23.2,396.06,1],[788.89,413.1,0],[375.65,117.38,1],[22.19,319.66,0],[323.06,322.34,1],[628.24,315.32,0],[738.17,253.92,1],[760.14,244.83,0],[112.55,385.09,1],[119.15,197.02,0],[218.4,406.26,1],[438.46,92.48,0],[199.61,185.56,1],[18.29,179.37,0],[264,302.94,1],[439.13,352.32,0],[252.72,22.02,1],[586.79,421.28,0],[208.06,360.29,1],[9.21,118.49,0],[312.28,140.05,1],[290.65,178.41,0],[623.37,103.16,1],[384.45,416.47,0],[300.18,251.73,1],[385.13,276.54,0],[765.67,241.79,1],[379.8,160.9,0],[167.11,210.31,1],[183.9,73.9,0],[576.88,344.93,1],[142.16,314.94,0],[208.55,194.62,1],[142.86,353.77,0],[645.1,359.13,1],[217.45,99.78,0],[13.7,177.51,1],[92.57,230.05,0],[198.21,62.44,1],[138.07,330.13,0],[420.78,186.05,1],[618.11,177.66,0],[716.51,193.7,1],[529.82,130.03,0],[732.95,328.81,1],[567.09,225.67,0],[485.59,5.67,1],[304.46,260,0],[768.61,252.7,1],[452.58,285.95,0],[70.09,257.23,1],[208.71,472.14,0],[653.73,221.94,1],[298.63,343.45,0],[288.51,408.72,1],[740.64,354.64,0],[604.54,376.56,1],[634.3,447.19,0],[529.86,123.85,1],[459.49,271.12,0],[381.91,72.34,1],[13.05,12.27,0],[361.61,216.66,1],[47.83,374.76,0],[491.09,245.82,1],[635.19,238.22,0],[458.54,290.29,1],[395.34,364.27,0],[82.02,164.76,1],[89.78,34.58,0],[715.6,195.27,1],[358.61,66.93,0],[612.34,352.83,1],[360.52,136.32,0],[533.55,187.62,1],[698.85,103.36,0],[253.09,124.02,1],[359.1,118.95,0],[287.17,238.83,1],[124.52,323.3,0],[638.9,202.36,1],[365.36,135.35,0],[598.06,312.01,1],[304.89,363.11,0],[712.92,203.34,1],[322.83,281.06,0],[699.2,38.74,1],[662.61,332.89,0],[51.32,209.81,1],[532.66,41.66,0],[206.41,292.02,1],[700.59,72.23,0],[527.57,30.33,1],[567.05,219.3,0],[15.06,318.13,1],[13.37,329.08,0],[396.21,410.49,1],[667.57,246.94,0],[506.91,255.17,1],[312.78,42.14,0],[683.25,26.66,1],[232.06,446.31,0],[184.39,211.59,1],[686.94,224.36,0],[279.16,202.87,1],[104.28,245,0],[696.46,360.97,1],[531.12,98.71,0],[460.8,448.26,1],[342.11,273.84,0],[91.83,253.02,1],[475.8,292.97,0],[621.45,317.55,1],[510.51,316.93,0],[276.02,335.36,1],[96.98,166.29,0],[401.65,247.39,1],[659.56,136.12,0],[769.34,222.04,1],[474.93,248.93,0],[638.22,362.99,1],[221.25,20.73,0],[429.26,105.97,1],[346.23,346.55,0],[658.79,236.75,1],[119.33,241.36,0],[413.34,14.12,1],[423.1,349,0],[172.85,262.28,1],[468.04,162.19,0],[340.45,100.61,1],[99.15,320.38,0],[251.59,384.68,1],[242.47,30.91,0],[379.78,310.01,1],[188.2,224.5,0],[25.79,391.59,1],[230.88,395.42,0],[202.7,448.12,1],[604.72,18.33,0],[215.46,340.92,1],[149.98,293.47,0],[149.56,393.59,1],[450.41,367.78,0],[369.81,127.89,1],[617.62,89.56,0],[439.06,446.54,1],[401.05,353.17,0],[384.33,115.71,1],[51.52,366.01,0],[361.68,161.57,1],[327.51,355.73,0],[790.52,233.23,1],[233.07,231.86,0],[96.18,79.36,1],[698.53,294.9,0],[116.68,97.19,1],[257.83,54.9,0],[120.02,271.4,1],[187.82,381.28,0],[96.32,152.54,1],[792.25,247.37,0],[107.66,290.63,1],[600.51,167.9,0],[112.72,187.25,1],[407.71,369.98,0],[41.05,427.93,1],[647.23,75.16,0],[763.73,368.1,1],[669.08,297.07,0],[490.53,305.99,1],[107.41,374.98,0],[226.1,65.05,1],[534.43,334.19,0],[384.6,173.45,1],[122.42,401.8,0],[73.23,182.86,1],[460.67,440.2,0],[27.64,423.01,1],[427.7,101.99,0],[765.74,170.46,1],[15.74,254.21,0],[459.26,167.57,1],[431.14,380.27,0],[136.24,370.62,1],[609.46,268.28,0],[666.21,438.96,1],[688.1,178.28,0],[149.58,153.57,1],[705.84,300.2,0],[158.87,43.91,1],[537.24,312.29,0],[188.5,211.32,1],[438.07,413.57,0],[595.7,84.33,1],[445.78,118.38,0],[69.67,323.85,1],[424.73,266.73,0],[656.46,302.38,1],[747.44,445.62,0],[732.36,105.5,1],[333.14,439.15,0],[792.27,458.33,1],[14.8,321.74,0],[209.53,471.34,1],[473.62,265.34,0],[597.55,14.28,1],[580.43,316.19,0],[517.61,423.36,1],[77.31,302.82,0],[592.48,313.85,1],[602.68,262.87,0],[480.1,79.57,1],[83.43,38.95,0],[558.77,432.27,1],[765.71,339.41,0],[436.27,193.25,1],[794.62,93.98,0],[295.26,274.55,1],[555.58,80.45,0],[558.06,232.06,1],[34.38,300.36,0],[297.88,230.38,1],[558.46,368.43,0],[474.31,186.34,1],[184.13,207.12,0],[697.86,41.88,1],[760.87,189.58,0],[286.45,46.74,1],[679.79,17.4,0],[41.16,230.09,1],[145.77,117.09,0],[627.27,114.31,1],[46.7,247.79,0],[35.49,141.09,1],[773.03,373.87,0],[459.98,412.73,1],[679.85,304.68,0],[140.63,110.73,1],[375.6,448.88,0],[301.64,268.53,1],[389.85,421.73,0],[600.2,218.27,1],[475.04,17.31,0],[280.56,306.62,1],[472.69,468.78,0],[120.31,110.88,1],[475.88,361.72,0],[467.78,126.88,1],[396.75,141.24,0],[539.18,288.03,1],[772.78,12.86,0],[465.65,465.3,1],[726.98,413.93,0],[629.8,456.99,1],[79.11,229.28,0],[545.76,424.36,1],[113.07,430.18,0],[92.09,228.6,1],[163.64,218.64,0],[747.39,368.08,1],[223.99,159.87,0],[794.65,7.81,1],[241.08,234.36,0],[122.66,350.78,1],[206.25,84.59,0],[366.94,349.7,1],[193.47,163.2,0],[512.09,51.08,1],[276.3,455.33,0],[7.44,282.1,1],[160.53,263.37,0],[196.04,453.24,1],[666.25,74.72,0],[542.25,316.53,1],[589.69,125.77,0],[258.76,283.51,1],[743.69,104.68,0],[285.15,439.97,1],[40.03,249.48,0],[667.56,71.01,1],[202.32,394.15,0],[486.52,404.34,1],[510.37,178.55,0],[570.33,54.43,1],[679.28,155.56,0],[468.82,190.5,1],[179.97,455.94,0],[753.88,437.64,1],[692.98,142.04,0],[12.1,150.02,1],[83.71,252.67,0],[170.53,323.31,1],[302.26,467.97,0],[462.18,450.6,1],[260.79,300.01,0],[407.47,130.48,1],[355.89,173.24,0],[46.56,101.65,1],[356.48,345.47,0],[11.02,162.49,1],[774.41,279.22,0],[525.77,302.01,1],[316.91,354.39,0],[676.92,403.94,1],[298.56,77.91,0],[500.25,118.93,1],[455.71,10.92,0],[374.39,6.33,1],[568.1,333.72,0],[296.39,439.83,1],[598.02,473.77,0],[203.76,252.11,1],[402.87,8.14,0],[784.31,195.95,1],[763.5,130.83,0],[188.44,445.49,1],[561.62,452.77,0],[670.58,120.54,1],[73.87,469.94,0],[712.72,355.33,1],[192.49,359.95,0],[712.13,144.39,1],[376.28,407.96,0],[326.4,118.09,1],[485.28,459.5,0],[283.34,151.82,1],[147.32,419.31,0],[561.3,328.24,1],[277.57,323.61,0],[103.5,89.55,1],[75.44,107.43,0],[152.83,135.51,1],[644.75,388.95,0],[493.52,401.31,1],[208.29,155.66,0],[481.56,57.43,1],[518.01,106.81,0],[292.93,27.06,1],[608.4,390.33,0],[115.39,201.75,1],[236.1,215.94,0],[675.49,280.72,1],[494.53,438.06,0],[536.1,323.75,1],[631,245.52,0],[333.09,424,1],[100.23,454.8,0],[248.31,27.32,1],[405.44,128.51,0],[41.12,206.88,1],[719.32,185.85,0],[284.03,25.21,1],[656.04,348.39,0],[474.78,121.59,1],[9.09,282.52,0],[296.7,72.78,1],[216.08,120.56,0],[607.95,267.65,1],[462.22,317.89,0],[548.84,157.15,1],[352.59,332.69,0],[337.57,186.82,1],[684.16,25.54,0],[630.06,411.74,1],[570.16,295.83,0],[276.1,306.81,1],[98.76,414.36,0],[240.89,130.96,1],[57.6,279.1,0],[531.31,292.64,1],[204.74,6.43,0],[664.86,389.71,1],[147.84,10.67,0],[258.8,174.55,1],[39.05,239.6,0],[714.32,461.43,1],[350.06,288.67,0],[574.15,398.14,1],[41.06,96.83,0],[62.94,43.5,1],[595.05,424.6,0],[506.02,7.21,1],[48.12,171.49,0],[724.66,419.9,1],[614.49,408.7,0],[390.99,89.25,1],[384.22,272.69,0],[410.24,183.72,1],[347.41,50.85,0],[511.99,250.33,1],[721.1,322.95,0],[502.24,190.04,1],[311.95,381.72,0],[357.72,291.42,1],[630.29,155.77,0],[743.29,444.5,1],[338.96,248.42,0],[761.08,256.02,1],[305.61,89.29,0],[671.77,302.87,1],[499.85,87.1,0],[693.32,84.67,1],[335.46,214.4,0],[175.22,191.05,1],[248.69,256.24,0],[671.13,453.91,1],[174.18,136.73,0],[176.76,362.39,1],[549.84,105.43,0],[449.54,120.99,1],[459.3,53.57,0],[285.83,244.37,1],[102.98,72.42,0],[208.52,203.86,1],[241.69,392.43,0],[562.5,134.43,1],[678.09,364.19,0],[677.59,225.32,1],[562.84,128.2,0],[663.1,429.72,1],[588.38,443.18,0],[55.93,10.6,1],[400.47,51.35,0],[145.73,13.06,1],[358.67,201.36,0],[259.31,91.71,1],[60.41,252.16,0],[104.53,59.69,1],[57.94,168.55,0],[476.35,187.59,1],[591.83,255.17,0],[336.45,328.86,1],[198.17,35.8,0],[492.14,272.42,1],[760.04,141.6,0],[24.28,437.58,1],[87.1,158.16,0],[692.3,245.47,1],[168.02,323.48,0],[58.07,273.63,1],[514.52,102.35,0],[743.49,307.41,1],[341.56,447.44,0],[477.98,227.77,1],[789.82,116.81,0],[116.28,422.98,1],[361.32,6.05,0],[443.63,270.14,1],[440.65,405.12,0],[237.36,402.6,1],[65.35,18.2,0],[50.19,23.63,1],[100.98,8.09,0],[738.23,353.5,1],[120.54,218.64,0],[735.37,374.01,1],[684.63,18.58,0],[47.21,85.07,1],[70.74,227.77,0],[676.27,342.08,1],[412.34,106.33,0],[515.33,36.92,1],[752.55,5.62,0],[196.74,331.06,1],[632.35,15.9,0],[601.34,203.55,1],[359.57,213.02,0],[329.68,458.58,1],[265.02,239.8,0],[624.92,444.32,1],[329.17,189.08,0],[767.4,288.21,1],[23.19,303.16,0],[90.39,45.53,1],[529.36,147.87,0],[506.68,426.61,1],[316.95,312.27,0],[256.27,468.73,1],[318.34,354.45,0],[69.49,303.97,1],[283.64,433.59,0],[708.56,384.95,1],[50.19,125.89,0],[692.94,131.97,1],[431.83,320.04,0],[261.62,375.86,1],[502.41,159.46,0],[166.85,277.92,1],[557.08,351.25,0],[645.25,182.04,1],[219.56,423.67,0],[206.12,73.4,1],[174.12,315.39,0],[444.26,120.86,1],[222.68,37.84,0],[425.63,14.47,1],[380.07,160.55,0],[654.17,283.81,1],[625.31,81.15,0],[613.78,102.47,1],[345.51,472.74,0],[14.34,177.01,1],[253.52,162.25,0],[683.08,105.49,1],[99.12,59.65,0],[314.8,383.55,1],[437.58,389.7,0],[654.2,139.79,1],[576.51,191.89,0],[62.26,251.36,1],[144.98,403.91,0],[628.88,364.61,1],[229.86,58.89,0],[132.82,193.6,1],[443.28,282.07,0],[190.97,277.57,1],[260.8,382.81,0],[644.63,426.39,1],[67.29,443.43,0],[510.11,257.47,1],[490.34,78.19,0],[454.28,45.99,1],[728.41,381.64,0],[200.59,71.01,1],[292.39,98.91,0],[21.56,419.01,1],[754.86,363.22,0],[192.44,307.96,1],[558.78,37.28,0],[148.48,277.91,1],[111.41,164.83,0],[500.42,97.83,1],[788.67,190.04,0],[391.81,9.49,1],[542.41,121.95,0],[771.49,44.5,1],[600.26,167.28,0],[129.35,82.23,1],[336.12,371.32,0],[701.47,260.78,1],[398.82,158.69,0],[268.99,30.72,1],[759.86,458.5,0],[552.26,152.72,1],[106.15,333.34,0],[122.96,233.51,1],[737.51,73.51,0],[686.61,407.58,1],[18.84,159.45,0],[601.74,469.18,1],[641.45,295.05,0],[776.46,34.21,1],[733.25,288.28,0],[636.37,402.7,1],[670.13,296.78,0],[149.73,218.12,1],[684.01,341.7,0],[590.15,412.58,1],[260.73,104.17,0],[531.53,383.77,1],[786.13,9.86,0],[36.17,363.4,1],[758.81,91.2,0],[360.45,348.14,1],[582.88,352.91,0],[185.01,420,1],[608.08,382.66,0],[65.77,369.29,1],[129.71,309.97,0],[597.12,9.02,1],[281.78,380.08,0],[467.29,399.06,1],[555.93,155.54,0],[783.89,11.44,1],[525.39,394.88,0],[134.23,109.81,1],[619.15,146.46,0],[18.63,77.8,1],[57.87,327.32,0],[162.25,215.74,1],[17.31,382.97,0],[462.42,227.84,1],[618.19,166.65,0],[500.51,206.72,1],[300.91,197.13,0],[413.13,123.98,1],[662.1,361.62,0],[246.45,369.02,1],[499.8,390.31,0],[214.3,84.11,1],[400.77,58.03,0],[607.97,381.26,1],[562.93,17.96,0],[29.98,348.44,1],[262.12,116.72,0],[265.63,116.84,1],[281.48,423.97,0],[564.49,146,1],[126.06,20.41,0],[760.54,274.27,1],[784.75,418.9,0],[33.6,294.4,1],[92.05,267.6,0],[356.47,391.74,1],[778.5,249.19,0],[182.9,356.78,1],[519.74,130.03,0],[730.14,344.82,1],[610.57,436.38,0],[375.08,74.65,1],[628.36,146.73,0],[271.22,301.12,1],[582.36,213.72,0],[648.34,321.78,1],[127.8,271.26,0],[744.85,461.8,1],[532.39,387.83,0],[69.94,123.07,1],[242.01,17.13,0],[459.09,15.76,1],[317.88,418.35,0],[542.83,253.65,1],[235.37,357.57,0],[494.44,12.16,1],[131.51,466.43,0],[456.34,342.27,1],[548.08,236.93,0],[65.23,71.53,1],[534.41,204.95,0],[633.73,350.12,1],[623.83,430.83,0],[749.41,353.18,1],[701.74,449.81,0],[587.79,137.47,1],[290.25,422.09,0],[525.97,219.64,1],[86.34,170.38,0],[563.33,184.77,1],[159.64,408.74,0],[5.78,175.65,1],[269.67,455.14,0],[598.55,134.12,1],[696.49,253.19,0],[400.89,5.65,1],[189.77,255.78,0],[777.37,112.85,1],[183.3,74.37,0],[674.32,219.66,1],[788.5,400.41,0],[756.14,149.04,1],[134.06,86.6,0],[402.64,292.09,1],[588.01,102.35,0],[543.72,331.99,1],[704.04,93.92,0],[87.83,405.18,1],[321.16,451.77,0],[5.89,296.02,1],[315.8,46.38,0],[514.16,468.62,1],[25.91,360.13,0],[72.73,307.25,1],[48.59,64.94,0],[340.87,299.1,1],[105.4,108.17,0],[159.35,62.25,1],[720.18,180.92,0],[638.2,81.93,1],[136.89,313.98,0],[710.79,155.34,1],[759.22,127.74,0],[270.78,278.13,1],[653.91,253.55,0],[342.56,368.3,1],[399.24,414.27,0],[51.42,340.88,1],[362.63,36.25,0],[764.78,8.35,1],[383.33,422.64,0],[353.06,347.57,1],[339.16,99.2,0],[155.43,239.41,1],[329.47,457.08,0],[268.63,412.5,1],[118.1,83.55,0],[793.09,340.39,1],[601.01,384.71,0],[430.99,147.2,1],[534.06,185.68,0],[475.88,251.52,1],[366.27,107.59,0],[560.15,350.8,1],[199.05,208.37,0],[539.42,107.69,1],[532.21,334.44,0],[193.47,158.95,1],[241.48,371.05,0],[645.32,33.85,1],[522.88,272.26,0],[662.65,321.14,1],[277.69,222.11,0],[520.01,155.51,1],[682.79,248.48,0],[249.12,289.95,1],[474.49,250.17,0],[604.69,39.99,1],[473.66,68.21,0],[572.89,206.72,1],[541.35,55.84,0],[394.29,177.8,1],[99.24,450.27,0],[517.41,112.93,1],[384.08,455.68,0],[781.03,56.94,1],[412.83,98.72,0],[427.83,43.09,1],[781.35,59.13,0],[445.52,179.36,1],[732.57,40.11,0],[83.65,36.8,1],[47.58,392.62,0],[705.42,10.21,1],[316.66,341.04,0],[542.54,245.91,1],[353.05,298.29,0],[498.2,331.31,1],[305.62,241.32,0],[723.66,372.45,1],[62.31,355.89,0],[252.81,470.35,1],[108.31,379.35,0],[71.3,227.99,1],[394.82,351.87,0],[13.58,216.29,1],[346.72,449.19,0],[505.5,19.04,1],[664.6,330.19,0],[749.76,365.48,1],[276.6,190.22,0],[5.54,182.72,1],[426.93,107.98,0],[401.42,91.24,1],[572.15,209.26,0],[307.03,29.81,1],[666.34,403.99,0],[257.5,231.12,1],[325.1,15.68,0],[227.54,180.54,1],[456.21,362.09,0],[66.38,335.92,1],[409.38,165.95,0],[406.02,347.43,1],[339.04,329.74,0],[211.93,231.97,1],[14.08,46.84,0],[307.36,363.85,1],[491.5,468.38,0],[650.66,173.85,1],[681.77,394.58,0],[406.46,428.88,1],[25.14,422.04,0],[490.16,38.36,1],[210.25,134.12,0],[588.22,67.15,1],[174.48,15.07,0],[202.26,193.32,1],[341.81,216.57,0],[559.06,336.94,1],[225.2,226.95,0],[98.46,405.91,1],[671.75,129.05,0],[45.69,53.93,1],[124.04,199.85,0],[326.74,439.38,1],[159.42,470.89,0],[12.59,313.6,1],[631.51,237.72,0],[48.56,253.47,1],[690.52,147.05,0],[720.73,122.74,1],[561,259.37,0],[636.57,272.43,1],[450.85,351.7,0],[272.7,27.08,1],[253.31,111.6,0],[420.06,121.24,1],[40.29,92.6,0],[452.93,281.68,1],[718.76,288.53,0],[441.81,300.79,1],[547.2,58.91,0],[92.12,387.18,1],[442.53,201.12,0],[693.48,410.07,1],[614.74,337.95,0],[709.2,122.74,1],[557.79,49.77,0],[489.73,47.92,1],[520.89,273.39,0],[704.89,320.89,1],[259.72,350.64,0],[9.33,16.28,1],[251.97,263.4,0],[92.35,245.14,1],[138.27,389.92,0],[68.87,210.45,1],[391.66,322.61,0],[327.66,93.2,1],[75.8,279.86,0],[185.09,245.92,1],[473.65,125.63,0],[781.26,104.81,1],[530.77,117.97,0],[177.93,378.74,1],[327.68,370.94,0],[305.03,411.06,1],[93.81,163.02,0],[507.54,335.18,1],[754.48,376.34,0],[167.71,242.74,1],[58.82,47.09,0],[129.32,256.62,1],[462.2,183.76,0],[103.52,443.7,1],[770.24,135.3,0],[749.05,99.36,1],[595.95,398.72,0],[288.8,279.26,1],[701.73,298.15,0],[360.26,189.08,1],[776.07,41.16,0],[655.33,10,1],[455.1,8.2,0],[191.04,386.45,1],[122.48,307.47,0],[570.85,216.45,1],[38.33,378.45,0],[167.93,252.18,1],[5.32,191.15,0],[125.11,20.26,1],[304.85,227.58,0],[324.23,449.3,1],[423.03,154.05,0],[750.5,320.25,1],[638.6,215.34,0],[675.23,348.56,1],[236.63,382.95,0],[83.03,28.97,1],[112.2,153.49,0],[642.44,11.85,1],[401.4,272.34,0],[681.76,291,1],[144.39,103.65,0],[789.05,155.18,1],[675.07,38.17,0],[634.49,99.59,1],[502.67,145.47,0],[178.51,96.67,1],[785.3,287.55,0],[303.26,393.87,1],[614.1,437.93,0],[774.84,373.73,1],[574.8,317.36,0],[300.46,79.23,1],[740.62,470.68,0],[106.78,186.45,1],[225.73,180.02,0],[396.21,368.93,1],[48.02,163.97,0],[340.52,286.34,1],[83.47,19.74,0],[13.46,354.25,1],[357.17,365.6,0],[311.2,295.74,1],[500.38,80.14,0],[330.75,334.73,1],[258.12,446.27,0],[670.31,394.64,1],[585.43,286.83,0],[340.44,474.31,1],[282.52,174.74,0],[242.7,112.27,1],[582.56,38.87,0],[644.96,239.81,1],[161.12,92.9,0],[257.99,347.32,1],[723.44,393.15,0],[34.18,467.48,1],[419.01,230.4,0],[242.78,444.08,1],[633.42,299.56,0],[284.57,314.05,1],[144.14,178.08,0],[720.06,312.75,1],[686.54,158.01,0],[533.2,284.34,1],[301.63,91.6,0],[718.15,132.13,1],[544.82,45.59,0],[48.22,290.57,1],[401.76,182.52,0],[469.55,70.86,1],[261.42,428.58,0],[213.32,289.96,1],[464.51,313.08,0],[477.75,389.36,1],[362.39,379.87,0],[421.91,167.31,1],[170.71,385.21,0],[150.24,237.81,1],[187.61,24.11,0],[677.45,437.93,1],[572.23,152.21,0],[272.5,93.65,1],[507.48,261.64,0],[137.51,467.5,1],[318.64,340.28,0],[324.65,367.37,1],[419.3,57.62,0],[697.7,176.58,1],[88.07,229.17,0],[404.19,185.89,1],[507.52,210.5,0],[696.14,103.07,1],[131.49,360.73,0],[214.64,116.23,1],[283.96,290.57,0],[247.23,407.27,1],[694.69,412.27,0],[298.23,301.96,1],[291.58,313.14,0],[41.97,31.67,1],[542.31,19.75,0],[581.94,379.66,1],[415.26,340.24,0],[389.7,148.11,1],[626.68,281.65,0],[676.13,194.54,1],[220.25,376.85,0],[647.98,195.85,1],[11.7,409.42,0],[130,176.29,1],[378.69,175.24,0],[678.47,339.08,1],[549.48,58.56,0],[359.48,64.21,1],[79.92,439.93,0],[241.19,124.27,1],[734.99,384.19,0],[408.84,53.33,1],[112.82,394.73,0],[133.51,236.93,1],[169.91,215.51,0],[301.05,362.14,1],[205.28,282.94,0],[707.38,190.32,1],[49.44,406.69,0],[177.6,210.96,1],[481.48,95.52,0],[386.44,417.13,1],[25.64,282.74,0],[19.71,160.04,1],[494.19,156.13,0],[658.89,292.04,1],[477.29,103.7,0],[274.04,404.17,1],[124.88,70.81,0],[423.69,206.12,1],[167.01,114.54,0],[647.04,241.03,1],[477.75,369.27,0],[373.76,341.79,1],[776.91,195.99,0],[503.06,135.86,1],[475.69,20.87,0],[165.62,32.47,1],[536.85,345.59,0],[645.91,338.06,1],[71.95,243.03,0],[152.96,204.84,1],[163.04,239.66,0],[710.79,134.61,1],[126.48,373.88,0],[499.98,7.37,1],[152.39,89.91,0],[42.61,465.97,1],[774.49,341.18,0],[115.34,133.85,1],[532.02,463.93,0],[543.76,355.95,1],[348.95,291.87,0],[64.64,245.54,1],[615.73,96.9,0],[55.87,329.86,1],[717.57,149.34,0],[684.69,141.17,1],[217.02,21.31,0],[100.02,333.66,1],[773.7,246.21,0],[188.88,156.41,1],[474.32,258.27,0],[660.69,237.59,1],[41.82,318.04,0],[317.31,453.41,1],[676.84,454.22,0],[167.42,409.32,1],[469.9,174.46,0],[394.39,319.25,1],[511.39,13.84,0],[770.15,38.11,1],[478.84,356.94,0],[138.49,298.89,1],[201.38,237.05,0],[773.44,156.24,1],[90.82,361.22,0],[171.72,167.25,1],[708.78,319.53,0],[719.88,266.48,1],[139.28,462.79,0],[171.18,69.49,1],[196.77,272.01,0],[762.24,153.13,1],[80.14,473.57,0],[211.77,448.45,1],[689.99,75.34,0],[752.43,115.87,1],[260.1,256.99,0],[672.48,91.41,1],[404.23,201.67,0],[43.39,424.16,1],[125.42,202.46,0],[715.71,11.5,1],[688.55,338.89,0],[355.25,204.81,1],[128.35,156.82,0],[372.88,116.1,1],[533.49,466.74,0],[780.34,449.29,1],[329.93,456.44,0],[414.65,258.24,1],[332.71,464.03,0],[411.97,307.87,1],[126.47,291.14,0],[665.25,432.6,1],[657.87,40.11,0],[62.81,127.22,1],[366.57,59.12,0],[679.33,211.05,1],[104.63,156.6,0],[78.14,340.7,1],[393.31,321.35,0],[270.45,422.79,1],[776.99,326.95,0],[188.95,25.2,1],[409.26,309.89,0],[622.09,217.77,1],[292.44,325.06,0],[582.61,283.44,1],[211.28,192.51,0],[733.73,273.26,1],[529.08,148.33,0],[383.93,434.03,1],[173.32,226.83,0],[289.4,72.64,1],[768.9,55.6,0],[298.8,251.73,1],[384.75,313.02,0],[493.6,357.47,1],[642.65,77.58,0],[733.74,372.26,1],[658.08,32.13,0],[21.7,92.96,1],[401.28,55.53,0],[363.58,100.47,1],[440.18,416.97,0],[724.67,149.39,1],[648.56,312.69,0],[704.7,246.14,1],[116.67,422.55,0],[575.18,294.48,1],[736.57,339.88,0],[746.02,32.51,1],[440.3,298.5,0],[590.37,409.38,1],[769.99,324.79,0],[25.2,239.29,1],[718.82,461.95,0],[631.09,392.43,1],[101.34,282.34,0],[345.65,215.45,1],[167.88,283.59,0],[201.6,241.64,1],[116.57,312.92,0],[274.77,466.38,1],[754.66,28.63,0],[566.19,183.43,1],[270.06,420.82,0],[462.68,170.39,1],[98.54,236.42,0],[320.93,264.83,1],[495.48,446.35,0],[219.73,452.02,1],[577.08,328.17,0],[228.99,13.33,1],[631.91,248.56,0],[287.91,409.9,1],[745.17,147.68,0],[149.54,90.84,1],[237.03,405.64,0],[460.37,385.09,1],[436.4,237.51,0],[496.03,356.91,1],[621.93,407.27,0],[578.89,232.77,1],[296.74,452.05,0],[689.64,35.98,1],[385.67,473.51,0],[684.53,407.94,1],[761.81,173.33,0],[432.98,222.1,1],[563.31,407.1,0],[16.04,306.36,1],[369.19,7.36,0],[465.39,400.73,1],[308.23,27.92,0],[185.17,153.01,1],[124.64,68.79,0],[717.25,167.23,1],[200.07,16.2,0],[252.18,141.18,1],[316.7,300.69,0],[239.06,390.09,1],[643.47,67.89,0],[757.78,18.75,1],[393.83,357.66,0],[21.87,138.38,1],[456.85,245.84,0],[276.19,270.2,1],[576.14,264.74,0],[293.39,219.85,1],[659.06,395.51,0],[375.07,402.2,1],[628.85,441,0],[34.6,367.47,1],[262.22,361.45,0],[158.18,111.29,1],[401.88,33,0],[533.04,294.82,1],[17.56,205.96,0],[737.8,52.01,1],[754.71,437.28,0],[519.4,112.11,1],[113.21,374.63,0],[494.44,16.91,1],[21.08,324.25,0],[106.34,127.92,1],[635.24,390.59,0],[152.63,336.65,1],[211.31,130.48,0],[521.47,137.73,1],[301.5,150.25,0],[103.07,154.56,1],[500.52,203.34,0],[263.61,346.12,1],[59.5,364.55,0],[678.93,201.66,1],[689.71,282.44,0],[653.76,92.19,1],[708.54,27.67,0],[267.04,384.54,1],[11.63,276.8,0],[691.28,419.53,1],[431.37,120.42,0],[432.84,44.79,1],[626.66,121.79,0],[689.03,310.48,1],[22.57,205.97,0],[169.48,189.18,1],[426.39,453.7,0],[607.82,197.97,1],[420.67,248.72,0],[555.24,163.94,1],[170.58,13.8,0],[143.5,198.86,1],[744.78,256.37,0],[34.34,252.96,1],[57.32,119.04,0],[256,351.81,1],[582.7,268.23,0],[696.85,330.95,1],[627.74,114.79,0],[364.72,84.38,1],[123,87.23,0],[33.39,324.11,1],[444.36,362.71,0],[266.64,383.4,1],[538.46,143.77,0],[124.3,156.89,1],[204.46,244.5,0],[315.43,199.55,1],[608.72,216.69,0],[428.1,139.03,1],[644.49,326.9,0],[759.84,410.04,1],[321.89,457.01,0],[433.8,282.41,1],[271.05,45.34,0],[162.41,430.72,1],[476.7,301.06,0],[237.21,79.97,1],[500.88,353.96,0],[151.96,168.84,1],[53.67,338.28,0],[194.94,167.78,1],[425.3,272.43,0],[391.94,63.98,1],[150.31,464.52,0],[549.8,341.81,1],[696.8,297.28,0],[566.12,412.06,1],[764.26,457.06,0],[519.04,77.25,1],[46.82,6.87,0],[627.36,60.91,1],[740.02,154.26,0],[116.74,243.22,1],[362.49,447.5,0],[665.99,10.08,1],[511.06,149.37,0],[718.18,71.38,1],[610.52,305.94,0],[399.24,396.89,1],[154.89,65.29,0],[673.5,366.97,1],[31.41,399.32,0],[464.15,172.15,1],[565.57,120.04,0],[645.9,144.12,1],[107.79,293.36,0],[783.73,226.26,1],[217.92,473.57,0],[470.47,241.6,1],[449.92,461.42,0],[56.07,178.25,1],[452.01,215.97,0],[257.04,368.91,1],[138.41,455.95,0],[172.56,436.96,1],[145.17,71.36,0],[10.2,104.85,1],[57.41,55.07,0],[390.37,357.23,1],[454.93,19.31,0],[110.51,265.23,1],[131.98,7.83,0],[717.12,249.76,1],[756.91,373.01,0],[662.71,64.47,1],[194.23,349.65,0],[403.68,355.5,1],[652.82,230.87,0],[625.84,192.47,1],[537.96,226.55,0],[490.5,363.18,1],[597.38,425.85,0],[123.8,32.6,1],[190.61,36.6,0],[450.09,19.97,1],[54.36,246.46,0],[367.52,105.09,1],[315.97,417.8,0],[171.45,119.99,1],[353.85,452.29,0],[74.5,326.89,1],[380.64,427.93,0],[741.91,151,1],[444.31,129.21,0],[88.23,39.58,1],[193.95,148.62,0],[631.6,169.05,1],[255.25,230.84,0],[203.64,283.91,1],[423.48,387.74,0],[115.78,295.58,1],[339.93,11.72,0],[302.17,272.71,1],[258.18,13.16,0],[313.81,434.72,1],[759.77,123.82,0],[432.52,267.45,1],[785.98,284.86,0],[651.88,329.5,1],[140.22,362.04,0],[236.64,47.76,1],[124.1,252.31,0],[228.25,327.26,1],[597.32,361.64,0],[668.93,471.66,1],[243.9,8.74,0],[282.73,392.73,1],[345.31,336.91,0],[294.8,62.49,1],[126.89,109.38,0],[40.85,7.46,1],[517.9,192.4,0],[105.43,340.52,1],[424.14,430.06,0],[34.76,188.03,1],[125.77,176.99,0],[634.04,459.55,1],[286.72,185.05,0],[203.35,416.01,1],[372.35,401.25,0],[562.07,119.18,1],[282.43,437.34,0],[790.15,423.52,1],[479.52,75.14,0],[56.16,178.92,1],[617.5,72.27,0],[246.02,401.69,1],[533.37,175.9,0],[226.25,303.15,1],[716.73,368.59,0],[54.67,460.89,1],[235.82,94.11,0],[154.32,401.65,1],[766.17,140.66,0],[400.52,141.81,1],[781.89,343.78,0],[285.72,85.86,1],[446.76,54.68,0],[234.04,325.85,1],[306.13,103.79,0],[499.56,176.46,1],[17.95,267.51,0],[62.56,258.63,1],[499.43,188.11,0],[88.03,309.25,1],[458.15,215.53,0],[31.96,275.26,1],[389.25,451.25,0],[314.83,284.83,1],[429.43,134.26,0],[535.03,325.85,1],[169.78,208.79,0],[666.97,218.35,1],[546.62,456.71,0],[725.09,47.12,1],[626.45,113.6,0],[139.39,189.59,1],[333.45,448.77,0],[145.82,232.25,1],[116.48,332.97,0],[742.02,363.95,1],[536.48,266.6,0],[672.75,157.13,1],[516.32,456.95,0],[305.85,416.25,1],[780.13,87.41,0],[763.12,268.1,1],[162.55,54.36,0],[732.87,461.44,1],[575.5,83.6,0],[92.52,149.67,1],[372.85,322.02,0],[209.93,95.97,1],[757.79,157.62,0],[728.72,398.94,1],[44.22,121.42,0],[132.54,16.95,1],[451.79,162.15,0],[594.3,322.76,1],[49.57,5.14,0],[252.58,232.65,1],[631.42,106.77,0],[13.21,315.48,1],[102.91,377.02,0],[371.76,210.11,1],[393.39,262.27,0],[309.26,318.33,1],[732.99,304.46,0],[657.32,217.26,1],[242.77,309.37,0],[295.89,230.1,1],[657.34,458.61,0],[98.01,190.72,1],[144.42,468.82,0],[560.4,383.5,1],[764.44,64.81,0],[305.32,180.84,1],[249.28,94.71,0],[490.82,104.7,1],[85.46,441.89,0],[336.67,389.77,1],[238.5,26.76,0],[601.58,7.52,1],[66.42,160.2,0],[613.17,152.14,1],[671.47,334.21,0],[293.63,40.16,1],[713.15,384.24,0],[364.65,444.27,1],[294.71,115.09,0],[263.51,82.08,1],[708.1,7.15,0],[492.03,25,1],[646.19,311.71,0],[546.94,129.97,1],[555.56,248.05,0],[427.39,67.03,1],[555.31,298.51,0],[272.97,206.33,1],[413.11,334.46,0],[600.8,35.25,1],[13.27,141.82,0],[324.46,95.28,1],[753.45,450.43,0],[15.77,124.36,1],[375.65,167.91,0],[710.83,37.75,1],[288.47,400.34,0],[214.28,425.86,1],[237.26,168.96,0],[221.51,29.67,1],[756.81,203.26,0],[282.09,81.47,1],[730,168.71,0],[769.69,271.5,1],[292.75,457.27,0],[675.7,356.85,1],[710.13,9.69,0],[478.74,371.69,1],[345.32,331.04,0],[233.25,213.8,1],[603.97,288.07,0],[312.2,341.04,1],[761.56,353.73,0],[285.98,151.67,1],[262.37,463.85,0],[195.32,166.3,1],[79.61,351.17,0],[238.87,318.46,1],[507.96,396.21,0],[19.75,114.82,1],[506.55,385.87,0],[538.53,329.7,1],[525.93,139.69,0],[616.96,405.25,1],[301.41,455.42,0],[507.97,434.41,1],[601.99,346.79,0],[319.32,125.27,1],[784.69,192.12,0],[58.97,195.54,1],[645.83,187.84,0],[668.83,314.82,1],[560.81,435.13,0],[744.08,110.46,1],[293.84,325.58,0],[422.23,400.44,1],[175.37,405.49,0],[337.22,166.75,1],[345.97,300.45,0],[658.01,165.83,1],[680.74,63.33,0],[726.18,112.73,1],[594.7,403.54,0],[580.46,347.87,1],[173.94,306.21,0],[527.52,172.42,1] ];
                gDelay = 0;
                break;
        }

        // we reset the flags
        for (var i = 0; i < gArrayPoints.length; i++) {
            gArrayPoints[i].id = i; // unique id
            gArrayPoints[i].fl = 0; // 0 we do not have a couple yet. 1 we have a connection
        }

        // we reset the other global value
        resetGlobalValues();

        // update the slider for gDelay
        moveSlider();
    }




    /**
     * After moving the slider we update the value of gDelay.
     */
    function computeSpeed() {
        // fast delay --> gDelay = 0  X on slider = 0
        // slow delay --> gDealay = 900 X on slider = 300
        gDelay = 3 * (gBtSlider.x - gPosSlider.x);
    }


    /**
     * We have changed the value of gDelay, we update the slider.
     */
    function moveSlider() {
        // see computeSpeed for explanations
        gBtSlider.x = gDelay/3 + gPosSlider.x;
    }

    /**
     * Change the visibility of the buttons
     *
     * @param {boolean} state - if true, showing buttons. If false, hiding them.
     */
    function showButtons(state) {
        // we use 2 global variables
        // gBtsArray : array that contains the buttons
        // gEnableBts : visibility or not of the buttons
        // 1: all the boutons are visible
        // 2: bts Go, Rand, Ring, Import, Export are invisible, others buttons visible
        // 3: all bts are invisible (during calculation)

        switch (state) {
            case 1:
                // all the boutons are visible
                var tempVisible = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
                var tempInvisible = [];
                gTextGhost.visible = true;
                gTextBuster.visible = false;
                gEnableBts = 1;
                break;

            case 2:
                // bts Go, Rand, Import, Export are invisible, others buttons visible
                var tempVisible = [1, 5, 6, 7, 8, 9];
                var tempInvisible = [0, 2, 3, 4];
                gTextGhost.visible = false;
                gTextBuster.visible = true;
                gEnableBts = 2;
                break;

            case 3:
                // all bts are invisible
                var tempVisible = [];
                var tempInvisible = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
                gTextGhost.visible = false;
                gTextBuster.visible = false;
                gEnableBts = 3;
                break;
        }

        // update alpha channel of the buttons
        for (var i=0; i < tempVisible.length; i++) {
            gBtsArray[tempVisible[i]].alpha = 1;
        }
        for (i=0; i < tempInvisible.length; i++) {
            gBtsArray[tempInvisible[i]].alpha = .3;
        }

        // important, if we have less than 4 points we can not calculate a scan
        if (gArrayPoints.length < 4) {
            gBtsArray[0].alpha = .3;
        }

    }


    /**
     * After clicking on a button, launch the good program.
     *
     * @param {Phaser.button} button - The button that were just clicked
     */
    function clickButton(button) {

        if (button.alpha == 1) {

            switch (button.name) {
                case 'btGo':
                    // button Go, launch program
                    showButtons(3); // hide all buttons
                    startSolving();
                    break;

                case 'btReset':
                    // button Reset, remove points on screen
                    gArrayPoints = [];
                    // we reset the other global value
                    resetGlobalValues();
                    showButtons(1); // view all buttons
                    gBmd.clear();
                    drawPoints(gArrayPoints);
                    gBmd.dirty = true;
                    break;

                case 'btRand':
                    // add  20 random points on screen
                    for (var i = 0; i < 10; i++) {
                        for (var j = 0; j < 2; j++) {
                            var tempPoint = [Math.round((5 + Math.random() * (SCREEN_WIDTH - 10))*100)/100, Math.round(100*(5 + Math.random() * (SCREEN_HEIGHT - INTERFACE_HEIGHT - 10)))/100, j];
                            gArrayPoints.push(tempPoint);
                        }
                    }

                    // we reset all the flags
                    for (i = 0; i < gArrayPoints.length; i++) {
                        gArrayPoints[i].id = i; // unique id
                        gArrayPoints[i].fl = 0; // 0 we do not have a couple yet. 1 we have a connection
                    }

                    // we reset the other global value
                    resetGlobalValues();
                    showButtons(1); // view all buttons
                    gBmd.clear();
                    drawPoints(gArrayPoints);
                    gBmd.dirty = true;
                    break;


                case
                'btImport':
                    // import points from text

                    break;

                case 'btExport':
                    // export points

                    break;

                case 'btTest1':
                    // load example 1 and draw points on screen
                    chooseExample(1);
                    showButtons(1); // view all buttons
                    gBmd.clear();
                    drawPoints(gArrayPoints);
                    gBmd.dirty = true;
                    break;

                case 'btTest2':
                    // load example 2
                    chooseExample(2);
                    showButtons(1); // view all buttons
                    gBmd.clear();
                    drawPoints(gArrayPoints);
                    gBmd.dirty = true;
                    break;

                case 'btTest3':
                    // load example 3
                    chooseExample(3);
                    showButtons(1); // view all buttons
                    gBmd.clear();
                    drawPoints(gArrayPoints);
                    gBmd.dirty = true;
                    break;
                case 'btTest4':
                    chooseExample(4);
                    showButtons(1); // view all buttons
                    gBmd.clear();
                    drawPoints(gArrayPoints);
                    gBmd.dirty = true;
                    break;

                case 'btTest5':
                    // load example 5
                    chooseExample(5);
                    showButtons(1); // view all buttons
                    gBmd.clear();
                    drawPoints(gArrayPoints);
                    gBmd.dirty = true;
                    break;
            }
        }

    }



    /**
     * Subroutine for interface that shows the text 'Click to add a ghost!' or 'click to add a ghostbuster!'.
     *
     * @param {number} numTextGhost - 0: show nothing. 1: text whith ghost. 2: text with ghostbuster
     */
    function chooseText(numTextGhost) {
        // only one text at the same time
        switch (numTextGhost) {
            case 0:
                // nothing
                gTextGhost.visible = false;
                gTextBuster.visible = false;
                // if we hide all we are doing a big calcul
                gEnableBts = 0;
                break;
            case 1:
                // text whith ghost
                gTextGhost.visible = true;
                gTextBuster.visible = false;
                // now the number of points is odd, so we can launch a calculation
                gEnableBts = 1;

                break;
            case 2:
                // text with ghostbuster
                gTextGhost.visible = false;
                gTextBuster.visible = true;
                // now the number of points is even, so we can not launch a calculation
                gEnableBts = 2;
                break;
        }
        return;
    }


    /**
     * Reset global var attached to gArrayPoints
     *
     * @param {number} numTextGhost - 0: show nothing. 1: text whith ghost. 2: text with ghostbuster
     */
    function resetGlobalValues() {
        // reset all global values (not gArrayPoints)
        gArrayPtsGreyLine = [];
        gLineConnection = [];
        gLinesCut = [];
        gCurrentSubset = 0;
    }



    /**
     * Load points from stage, reset flags on points and launch the Graham's scan
     */
    function startSolving() {  // pointsToConnect
       // we reset all global arrays
        resetGlobalValues();

        // we add an unique id and a flag
        for (var i = 0; i < gArrayPoints.length; i++) {
            gArrayPoints[i].id = i; // unique id
            gArrayPoints[i].fl = 0; // 0 we do not have a couple yet. 1 we have a connection
        }

        // we start the graham scan
        startGrahamScan(gArrayPoints);
    }


    /**
     * Launch Graham's scan
     *
     * @param {number} pointsForGraham - array of points (same description as gArrayPoints)
     */
    function startGrahamScan(pointsForGraham) {
        // we calculate Graham scan with animation (true, we want animation)
        gArrayAnim = grahamScan(pointsForGraham, true);

        // animation of the graham scan
        gNumGrahamAnim = 0; // start at the beginning

        if (gDelay == 0) {
            // without animation we go directly to find couples
            makeCouples();
        } else {
            drawGrahamAnimation();
        }
    }


    /**
     * Subroutine showing the animation of the Graham's method.
     *
     * We use 3 globals
     * gArrayAnim - an array of array with the points [ [[x1, y1], [x2, y2]], [[x1, y1], [x4, y4], [x5, y5]], …]
     * gArrayPoints - an array of points to draw
     * gNumGrahamAnim - num of animation for Graham
     */
    function drawGrahamAnimation() {
        // value by default
        gNumGrahamAnim = (typeof gNumGrahamAnim == 'undefined' ? 0 : gNumGrahamAnim);

        // clear the bitmapData
        gBmd.clear();

        // this animation with the points to animate
        var arrayTemp = gArrayAnim[Math.min(gNumGrahamAnim, gArrayAnim.length - 1)];

        // I remove the last grey line (it is the last point for the previous animation)
        if (gNumGrahamAnim > 0) {
            removeIdArray(gArrayPtsGreyLine, gArrayAnim[gNumGrahamAnim - 1][gArrayAnim[gNumGrahamAnim - 1].length - 1].id);
        }

        // we draw the grey lines connecting all the dots
        drawAllLinesFromP0(gArrayAnim[0][0]);

        // drawing the graham scan
        gBmd.ctx.beginPath();
        gBmd.ctx.lineWidth = '1';
        gBmd.ctx.setLineDash([]);
        gBmd.ctx.strokeStyle = 'DarkViolet';
        gBmd.ctx.moveTo(arrayTemp[0][0], invY(arrayTemp[0][1]));
        for (var i = 1; i < arrayTemp.length; i++) {
            gBmd.ctx.lineTo(arrayTemp[i][0], invY(arrayTemp[i][1]));
        }
        // we close the path on p0
        gBmd.ctx.lineTo(arrayTemp[0][0], invY(arrayTemp[0][1]));
        gBmd.ctx.stroke(); // Draw it

        // at the end, we draw all the points (ghosts and ghostbusters) over the scan
        drawPoints(gArrayPoints);

        // If dirty this BitmapData will be re-rendered.
        gBmd.dirty = true;

        // next animation
        gNumGrahamAnim++;

        // Animation is finished, i must find the couple ghost <--> ghostBuster on the curve
        if (gNumGrahamAnim == gArrayAnim.length + 1) {
            // game.time.events.removeAll();
            makeCouples();
        } else {
            // one more time, for the next animation
            //game.time.events.removeAll();
            game.time.events.add(gDelay, drawGrahamAnimation, this);
        }
    }

    /**
     * When we have all the points on the curve, we want to find couples
     */
    function makeCouples() {
        // all the points on the curve are on the last gArrayAnim[gArrayAnim.length - 1]
        // the points array are sorted relative to polar angle (they follow the curve)

        // my last segment with all points on the curve
        var ptsOnCurve = gArrayAnim[gArrayAnim.length - 1];

        // If .fl = 1 I have a connection
        for (var i = 0; i < ptsOnCurve.length; i++) {
            ptsOnCurve[i].fl = 0;
        }

        // 0 --> it is a ghost; 1 --> it is a ghostbuster
        for (var i = 1; i < ptsOnCurve.length; i++) {
            if (ptsOnCurve[i - 1][2] != ptsOnCurve[i][2]) {
                // I find a couple
                gLineConnection.push([ptsOnCurve[i - 1].id, ptsOnCurve[i].id]);
                gLineConnection[gLineConnection.length - 1].fl = 1; // I put a flag = 1 --> just connected
                // I flag the 2 points
                ptsOnCurve[i - 1].fl = 1;
                ptsOnCurve[i].fl = 1;

                // I keep only the id of the point, the coords are in gArrayPoints
                // the coord of point with id = 3 are in gArrayPoints[3]
                i++;// not necessary to test the same point
            }
        }

        // Important: if the first point and the last point on the curve are not married and are different
        if ((ptsOnCurve[0].fl == 0 && ptsOnCurve[ptsOnCurve.length - 1].fl == 0) && (ptsOnCurve[0][2] != ptsOnCurve[ptsOnCurve.length - 1][2])) {
            // I find a couple
            gLineConnection.push([ptsOnCurve[0].id, ptsOnCurve[ptsOnCurve.length - 1].id]);
            gLineConnection[gLineConnection.length - 1].fl = 1; // I put a flag = 1 --> just connected

            // I flag the 2 points
            ptsOnCurve[0].fl = 1;
            ptsOnCurve[ptsOnCurve.length - 1].fl = 1;
        }

        // animation of the connections
        game.time.events.add(gDelay, drawLastCouple, this);
    }


    /**
     * we draw the last couples found on the hull
     */
    function drawLastCouple() {
        // clear the bitmapData
        gBmd.clear();

        // my last segment with all points on the curve
        var ptsOnCurve = gArrayAnim[gArrayAnim.length - 1];

        // drawing the graham scan
        gBmd.ctx.beginPath();
        gBmd.ctx.lineWidth = '1';
        gBmd.ctx.setLineDash([5, 5]);
        gBmd.ctx.strokeStyle = 'DarkViolet ';

        gBmd.ctx.moveTo(ptsOnCurve[0][0], invY(ptsOnCurve[0][1]));
        for (var i = 1; i < ptsOnCurve.length; i++) {
            gBmd.ctx.lineTo(ptsOnCurve[i][0], invY(ptsOnCurve[i][1]));
        }
        // we close the path on p0
        gBmd.ctx.lineTo(ptsOnCurve[0][0], invY(ptsOnCurve[0][1]));
        gBmd.ctx.stroke(); // Draw it

        // we draw only the last connection
        drawLaserConnection(true);

        // at the end, we draw all the points (ghosts and ghostbusters) over the scan
        drawPoints(gArrayPoints);

        // If dirty this BitmapData will be re-rendered.
        gBmd.dirty = true;

        // go to another scan
        game.time.events.add(gDelay * 6, oneMoreTime, this);
    }


    /**
     * I have just finished a graham scan.
     * We must calculate another scan
     */
    function oneMoreTime() {
        // I have 3 options
        // A) I have still some points --> another graham scan
        // B) we finished all the points
        //    B1) no more subset waiting, it is all finished
        //    B2) we have one or more subset. we launch a graham scan on the last one
        // C)  my graham scan give nothing (on the curve I have only ghosts for example). We cut the problem in 2 subsets


        // to see, if my scan was good
        var tempFlag = false;

        // I change the state of point already connected
        // .fl = 1 (just connected) became .fl = 2 (old connection)
        var tempArray = [];
        for (var i = 0; i < gArrayPoints.length; i++) {
            if (gArrayPoints[i].fl == 1) {
                tempFlag = true;
                gArrayPoints[i].fl = 2;
            }
            // we look for the next points to calculate
            if (gArrayPoints[i].fl == 0) {
                // this point is alone
                tempArray.push(gArrayPoints[i]);
            }
        }
        // I change the state of connected points
        // .fl = 1 (just connected) became .fl = 2 (old connection)
        for (i = 0; i < gLineConnection.length; i++) {
            if (gLineConnection[i].fl == 1) {
                gLineConnection[i].fl = 2;
            }
        }


        // A) We found couples and we have some points to marry
        if (tempFlag == true && tempArray.length > 0) {
            // we start a new scan
            startGrahamScan(tempArray);
        } else if (tempArray.length == 0) {
            // B) All the points are in couples
            if (gCurrentSubset == 0) {
                // B1) there is no subsets left, it is finish YEP

                // clear the bitmapData
                gBmd.clear();

                // I change the state of point already connected
                // .fl = 1 (just connected) became .fl = 2 (old connection)
                for (i = 0; i < gArrayPoints.length; i++) {
                    if (gArrayPoints[i].fl == 2) {
                        gArrayPoints[i].fl = 1;
                    }
                }

                // I change the state of connected points
                // .fl = 1 (just connected) became .fl = 2 (old connection)
                for (i = 0; i < gLineConnection.length; i++) {
                    if (gLineConnection[i].fl == 2) {
                        gLineConnection[i].fl = 1;
                    }
                }
                // we draw only the last connection
                drawLaserConnection(true);

                // at the end, we draw all the points (ghosts and ghostbusters) over the scan
                drawPoints(gArrayPoints);

                // If dirty this BitmapData will be re-rendered.
                gBmd.dirty = true;

                showButtons(1); // view all buttons

                console.log('WELL DONE  ' + gArrayPoints.length + 'pts' + ' ' + gLinesCut.length);

                /*
                var temp = '[ ';
                for (var i=0; i < gArrayPoints.length; i++) {
                    temp += '[' + gArrayPoints[i][0] + ',' + gArrayPoints[i][1] + ',' + gArrayPoints[i][2] + '],'
                }
                console.log(temp);
                */


            } else {
                // B2) there is a subset left

                tempArray = [];
                // we scan all the points to validate the last subset
                for (i = 0; i < gArrayPoints.length; i++) {
                    if (gArrayPoints[i].fl == 2 + gCurrentSubset) {
                        // we want to use them
                        gArrayPoints[i].fl = 0;
                        // this point is alone
                        tempArray.push(gArrayPoints[i]);
                    }
                }

                // one subset found
                gCurrentSubset--;

                // we start a new scan
                startGrahamScan(tempArray);
            }


        } else if (tempFlag == false) {
            // I cut my points into 2 parts
            var ptsToScanNow = cutProblem(tempArray);

            // we start a new scan
            startGrahamScan(ptsToScanNow);
        }

    }



    /**
     * When the graham scan is inoperative, we draw an horizontal line at Ymax
     * the line come down slowly to Y=0
     * At each scan, we count the numbers of ghost and ghostBuster above the line
     * if the number of ghost = number of ghostbuster, we can cut the plane in 2 parts.
     * Then we do a graham scan on the top points (Y max)
     * The others points are waiting the end of the graham calculation
     * When we cut, we increment the global value gCurrentSubset
     * For the waiting points --> points[n].fl = 2 + gCurrentSubset
     * we return the array of points that we can use immediately
     */
        function cutProblem(pointsToCut) {

        // sort array by y coordinate
        pointsToCut.sort(function (a, b) {
            return b[1] - a[1];
        });

        // we draw an horizontal line every 2 points
        // I count ghosts and ghostbusters above the line
        // If I have the same number of ghost and ghostbuster, I can cut it
        //  pointsToCut.length - 2 : no need to test the last couple of points
        // it is always true, but it does not solve our problem
        var numGhost = 0;
        var numHunter = 0;
        for (var i = 0; i < pointsToCut.length - 2; i += 2) {
            if (pointsToCut[i][2] == 0) {
                numGhost++; // one more ghost
            } else {
                numHunter++; // one more ghostHunter
            }

            if (pointsToCut[i + 1][2] == 0) {
                numGhost++; // one more ghost
            } else {
                numHunter++; // one more ghostHunter
            }

            if (numGhost == numHunter) {
                // I find my line
                break;
            }
        }

        // We can cut the plane here
        // index of the first point to wait for calculation
        var tempIndex = i + 2;

        // Note: we can have a problem, if the next point e.g. pointsToCut[i+1] have the same Y that  pointsToCut[i]
        // in this case the points are aligned and we can not accept the solution.
        // amelioration: if it does not works change orientation of the line

        // another subset scan
        gCurrentSubset++;

        // Y of the line we draw on the screen. The Y is between the last point and the next one
        var yLine = pointsToCut[tempIndex][1] + (pointsToCut[tempIndex - 1][1] - pointsToCut[tempIndex][1]) / 2;
        // we save the Y value of the line
        gLinesCut.push(yLine);

        // we mark the points that we do not scan
        for (i = tempIndex; i < pointsToCut.length; i++) {
            pointsToCut[i].fl = 2 + gCurrentSubset;
        }

        // we return the points that we can use for graham scan
        var tempArray = [];

        for (i = 0; i < pointsToCut.length; i++) {
            if (pointsToCut[i].fl == 0) {
                tempArray.push(pointsToCut[i]);
            }
        }
        return (tempArray);


    }


    /**
     * Subroutine that draw laser between ghost and ghostbuster
     *
     * @param {boolean} onlyLast - if true, we draw only the last graham scan calculated. If false, we draw the previous connection calculated.
     */
    function drawLaserConnection(onlyLast) {
        // value by default
        onlyLast = (typeof onlyLast == 'undefined' ? true : onlyLast);

        // we need 2 points to draw a line
        if (gLineConnection.length > 1) {
            if (onlyLast) {
                // drawing only the connected points
                gBmd.ctx.beginPath();
                gBmd.ctx.lineWidth = '2';
                gBmd.ctx.setLineDash([]);
                gBmd.ctx.strokeStyle = 'DarkViolet ';

                for (var i = 0; i < gLineConnection.length; i++) {
                    if (gLineConnection[i].fl == 1) {
                        var pt1 = gArrayPoints[gLineConnection[i][0]];
                        var pt2 = gArrayPoints[gLineConnection[i][1]];
                        gBmd.ctx.moveTo(pt1[0], invY(pt1[1]));
                        gBmd.ctx.lineTo(pt2[0], invY(pt2[1]));
                    }
                }
                gBmd.ctx.stroke(); // Draw it
            } else {
                // drawing the old connected points
                gBmd.ctx.beginPath();
                gBmd.ctx.lineWidth = '1';
                gBmd.ctx.setLineDash([]);
                gBmd.ctx.strokeStyle = 'Gainsboro ';

                for (var i = 0; i < gLineConnection.length; i++) {
                    if (gLineConnection[i].fl == 2) {
                        var pt1 = gArrayPoints[gLineConnection[i][0]];
                        var pt2 = gArrayPoints[gLineConnection[i][1]];
                        gBmd.ctx.moveTo(pt1[0], invY(pt1[1]));
                        gBmd.ctx.lineTo(pt2[0], invY(pt2[1]));
                    }
                }
                gBmd.ctx.stroke(); // Draw it
            }

        }
    }

    /**
     * Subroutine to remove in an array, an item with .id = numId
     * We draw on the bitmapData gBmd
     * We do not ask to render the bitmapData
     *
     * @param {array} testArray - An array of item
     * @param {number} numID - Number of the id we want to remove
     * @returns {number} - the index of the item before deleting it. -1 if not found
     */
    function removeIdArray(testArray, numID) {
        for (var i = 0; i < testArray.length; i++) {
            if (testArray[i].id === numID) {
                testArray.splice(i, 1);
                return i;
            }
        }
        // nothing found and remove
        return -1;
    }


    /**
     * Subroutine drawing lines connected to each other.
     * We draw on the bitmapData gBmd
     * We do not ask to render the bitmapData
     *
     * @param {array} point - An array of points [[x1, y1], [x2, y2], [x3, y3], …]
     */
    function drawAllLinesFromP0(point) {
        // we need points to draw lines
        if (gArrayPtsGreyLine.length > 1) {
            // if we have n points, we can draw n-1 lines
            gBmd.ctx.beginPath();
            gBmd.ctx.lineWidth = '1';
            gBmd.ctx.setLineDash([]);
            gBmd.ctx.strokeStyle = "Gainsboro"; // yes it is a color
            gBmd.ctx.moveTo(gArrayPtsGreyLine[0][0], invY(gArrayPtsGreyLine[0][1]));

            for (var i = 1; i < gArrayPtsGreyLine.length; i++) {
                gBmd.ctx.lineTo(gArrayPtsGreyLine[i][0], invY(gArrayPtsGreyLine[i][1]));
            }
            // we close with p0 point
            gBmd.ctx.lineTo(point[0], invY(point[1]));
            gBmd.ctx.stroke(); // Draw it
        }
    }


    /**
     * Subroutine to that draw a border around the stage
     */
    function drawBorders(){
        // we draw a rectangle around the bitmapData
        // we draw each lines
        gBmd.ctx.beginPath();
        gBmd.ctx.lineWidth = '1';
        gBmd.ctx.setLineDash([]);
        gBmd.ctx.strokeStyle = 'Gainsboro ';

        gBmd.ctx.moveTo(0, 0);
        gBmd.ctx.lineTo(0, gBmd.height);
        gBmd.ctx.lineTo(gBmd.width, gBmd.height);
        gBmd.ctx.lineTo(gBmd.width, 0);
        gBmd.ctx.lineTo(0, 0);

        gBmd.ctx.stroke(); // Draw it
    }


    /**
     * When we cut the problem. Draw a dotted line showing the horizontal line
     */
    function drawCutLines() {
        // we draw all the horizontal lines that cut the plane
        if (gLinesCut.length > 0) {
            // we draw each lines
            gBmd.ctx.beginPath();
            gBmd.ctx.lineWidth = '1';
            gBmd.ctx.setLineDash([5,5]);
            gBmd.ctx.strokeStyle = 'Gainsboro ';

            for (var i = 0; i < gLinesCut.length; i++) {
                // Y line X=0 to X=SCREEN_WIDTH
                gBmd.ctx.moveTo(0, invY(gLinesCut[i]));
                gBmd.ctx.lineTo(SCREEN_WIDTH, invY(gLinesCut[i]));
            }
            gBmd.ctx.stroke(); // Draw it
        }
    }


    // we draw only the ghosts and the ghostbusters, not the line



    /**
     * Subroutine drawing ghost (red points) and ghostbuster (yellow points)
     * We draw on the bitmapData gBmd
     * We do not ask to render the bitmapData
     *
     * @param {array} arrayPoints - An array of points [[x1, y1], [x2, y2], [x3, y3], …]
     */
    function drawPoints(arrayPoints) {

        // we draw a border around the screen
        drawBorders();

        // we draw the horizontal lines
        drawCutLines();

        // we draw the laser connection of the previous graham scan
        drawLaserConnection(false);

        // you can find the name of color: http://www.w3schools.com/tags/ref_colornames.asp
        // we remove dotted line
        gBmd.ctx.setLineDash([]);
        gBmd.ctx.lineDashOffset = 0;


        var radius; // radius of the circle
        var width; // width of the line
        var fillStyleColorGhost; // fill color ghost
        var fillStyleColorBuster; // fill color ghostBuster
        var lineColorGhost; // line color ghost
        var lineColorBuster; // line color buster;


        for (var i = 0; i < arrayPoints.length; i++) {
            // if arrayPoints[i].fl == 1 the point is married whith another one

            switch (arrayPoints[i].fl) {
                case 0:
                    // standard, points are visible but not married
                    radius = 4;
                    width = 1;
                    fillStyleColorGhost = 'Red'; // fill color ghost
                    fillStyleColorBuster = 'Yellow'; // fill color ghostBuster
                    lineColorGhost = 'FireBrick'; // line color ghost
                    lineColorBuster = 'GoldenRod'; // line color buster;
                    break;
                case 1:
                    // just married, put them in evidence
                    radius = 4;
                    width = 2;
                    fillStyleColorGhost = 'Red'; // fill color ghost
                    fillStyleColorBuster = 'Yellow'; // fill color ghostBuster
                    lineColorGhost = 'SaddleBrown'; // line color ghost
                    lineColorBuster = 'SaddleBrown'; // line color buster;
                    break;
                default:
                    // already calculated or must be calculated later, hide them in grey
                    radius = 4;
                    width = 1;
                    fillStyleColorGhost = 'GhostWhite'; // fill color ghost
                    fillStyleColorBuster = 'GhostWhite'; // fill color ghostBuster
                    lineColorGhost = 'Gainsboro'; // line color ghost
                    lineColorBuster = 'Gainsboro'; // line color buster;
                    break;
            }


            // if arrayPoints[i][2] == 0 --> it is a ghost
            // if arrayPoints[i][2] == 1 --> it is a ghostbuster
            if (arrayPoints[i][2] == 0) {
                fillStyleColor = fillStyleColorGhost;
                lineColor = lineColorGhost;
            } else {
                fillStyleColor = fillStyleColorBuster;
                lineColor = lineColorBuster;
            }


            gBmd.ctx.beginPath();
            gBmd.ctx.lineWidth = width;
            gBmd.ctx.strokeStyle = lineColor;
            gBmd.ctx.fillStyle = fillStyleColor;
            gBmd.ctx.arc(arrayPoints[i][0], invY(arrayPoints[i][1]), radius, 0, Math.PI * 2);

            gBmd.ctx.fill();
            gBmd.ctx.stroke();
        }
    }


    /**
     * Subroutine computing the convex hull of a finite set of points in the plane using Graham's method.
     *
     * @see The <a href="http://http://en.wikipedia.org/wiki/Graham_scan">Graham_scan</a>.
     *
     * @example
     * var a = grahamScan([[510,300,1],[515,80,1],[330,190,0],[86,77,0],[78,320,1],[310,320,0]], false);
     * // give only the points on the hull --> [ [86, 77, 0], [515, 80, 1], [510, 300, 1], [310, 320, 0], [78, 320, 1] ]
     * // the first point is the pivot point p0 --> [86, 77]
     *
     * var b = grahamScan([[510,300,1],[515,80,1],[330,190,0],[86,77,0],[78,320,1],[310,320,0]], true);
     * //give an array showing all the iterations of the formula
     * // [ [[86,77,0],[515,80,1]],
     * //   [[86,77,0],[515,80,1],[330,190,0]]
     * //   [[86,77,0],[515,80,1]]
     * //   [[86,77,0],[515,80,1],[510,300,1]]
     * //   [[86,77,0],[515,80,1],[510,300,1],[310,320,0]]
     * //   [[86,77,0],[515,80,1],[510,300,1],[310,320,0],[78,320,1] ]
     *
     * @param {array} ptsArray - an array of points [[x1, y1], [x2, y2], [x3, y3], …]
     * @param {boolean} [false] withAnim - if true exports the animation of the search. if false exports only the points of the hull.
     * @returns {array} - the arrays of points on the hull ()
     */
    function grahamScan(ptsArray, withAnim) {
        // value by default
        withAnim = (typeof withAnim == 'undefined' ? false : withAnim);

        // make a copy of original array
        var pts = ptsArray.slice();

        // Find the anchor point (base point) p0. It is the minimum y coordinate
        // In case of tie, we take the minimum x coordinate

        // sort array by y coordinate
        pts.sort(function (a, b) {
            return a[1] - b[1];
        });

        // initialisation of the value of yMin (P0.y)
        var yMin = Number.MAX_VALUE;

        // index of the p0 point in Q
        // in most cases, it must be 0, perhaps 1 ( for example if pts[0][1] == pts[1][1] and pts[0][0] > pts[1][0])
        var indexP0 = 0;

        // special case are tested (if at the beginning of the array we have the same y coordinate, with a smaller x value)
        for (var i = 0; i < pts.length; ++i) {
            var p = pts[i];
            if (p[1] < yMin) {
                yMin = p[1];
                indexP0 = i;
            }
            else if (p[1] == yMin) { // Select point with the smallest x coordinate
                if (pts[i - 1][0] > p[0]) {
                    indexP0 = i;
                }
            }

            // as the array is sorted with the Y value, no need to continue
            if (i > 1 && p[i] > yMin) {
                break;
            }
        }

        // my anchor point p0
        var p0 = pts[indexP0];

        // remove p0 from the array of points
        pts.splice(indexP0, 1);

        // calculate the polar angle in radians for all points in array pts relative to point p0
        for (i = 0; i < pts.length; i++) {
            pts[i].polar = calculateAngle(p0, pts[i]);
        }

        // sort array of points relative to polar angle
        pts.sort(function (a, b) {
            return a.polar - b.polar;
        });

        // if 2 points have the same polar angle, I remove the closest one to p0
        for (i = 1; i < pts.length; i++) {
            if (pts[i - 1].polar == pts[i].polar) {
                var d1 = distance2(p0, pts[i - 1]);
                var d2 = distance2(p0, pts[i]);
                if (d2 < d1) {
                    pts.splice(i, 1);
                } else {
                    pts.splice(i - 1, 1);
                }
            }
        }

        // at last, the Graham scan :-)
        // init array, with p0 and the first two pints
        var arrayResult = [];
        arrayResult.push(p0);
        arrayResult.push(pts[0]);
        // I save this array for animation of the first line.
        var queueDraw = []; // queue of commands we have to draw (to show animation)
        queueDraw.push(arrayResult.slice());

        // if I have only 2 points, I can not do it
        if (pts.length > 1) {
            arrayResult.push(pts[1]);
        }

        // I save this array for animation of the second line
        queueDraw.push(arrayResult.slice());

        for (i = 2; i < pts.length; ++i) {
            var pi = pts[i];
            while (ccw(arrayResult[arrayResult.length - 2], arrayResult[arrayResult.length - 1], pi) <= 0) {
                arrayResult.pop();
                // save line animation
                queueDraw.push(arrayResult.slice());
            }
            arrayResult.push(pi);
            // save line animation
            queueDraw.push(arrayResult.slice());
        }

        if (withAnim) {
            // array with the points for the grey lines
            gArrayPtsGreyLine = pts.slice();
            // the points with animation
            return queueDraw;
        } else {
            // only the points
            return arrayResult;
        }
    }


    /**
     * Subroutine computing distance^2 between 2 points pt1, pt2
     *
     * @param {array} pt1 - a simple 2d point [x1, y1]
     * @param {array} pt2 - a simple 2d point [x2, y2]
     * @returns {number} - length of the 2 points
     */
    function distance2(pt1, pt2) {
        return ((pt2[0] - pt1[0]) * (pt2[0] - pt1[0]) + (pt2[1] - pt1[1]) * (pt2[1] - pt1[1]));
    }


    /**
     * Subroutine converting cartesian to polar
     *
     * @param {array} x - a simple 2d point [x1, y1]
     * @param {array} y - a simple 2d point [x2, y2]
     * @returns {number} - angle of the 2 vectors
     */
    function cartesianAngle(x, y) {
        if (x > 0 && y > 0)
            return Math.atan(y / x);
        else if (x < 0 && y > 0)
            return Math.atan(-x / y) + Math.PI / 2;
        else if (x < 0 && y < 0)
            return Math.atan(y / x) + Math.PI;
        else if (x > 0 && y < 0)
            return Math.atan(-x / y) + Math.PI / 2 + Math.PI;
        else if (x == 0 && y > 0)
            return Math.PI / 2;
        else if (x < 0 && y == 0)
            return Math.PI;
        else if (x == 0 && y < 0)
            return Math.PI / 2 + Math.PI;
        else return 0;
    }


    /**
     * Subroutine calculating angle from 2 points
     *
     * @param {array} p1 - a simple 2d point [x1, y1]
     * @param {array} p2 - a simple 2d point [x2, y2]
     * @returns {number} - angle of the 2 vectors
     */
    function calculateAngle(p1, p2) {
        return cartesianAngle(p2[0] - p1[0], p2[1] - p1[1])
    }

    /**
     * Calculate if 3 points are in a 'left turn' (counter clockwise) or in a 'right turn' (clockwise)
     * We do not compute the actual angle between the 2 lines.
     * We simply calculate, the Z coordinate of the cross product of the 2 vectors.
     * For 3 points (x1, y1), (x2, y2), (x3, y3)
     * We compute the z coordinate of the cross product of the 2 vectors connecting the points
     * V1 --> x1 to y1 (x2 - x1, y2 - y1)
     * V2 --> x1 to y3 (x3 - x1, y3 - y1)
     * The Z coordinate of the cross product V1^V2 = (V1.x * V2.y - V1.y*V2.x) = (x2 - x1)*(y3 - y1) - (y2 - y1)*(x3 - x1)
     *
     * @param {array} p1 - a simple 2d point [x1, y1]
     * @param {array} p2 - a simple 2d point [x2, y2]
     * @returns {number} - = 0 : the 3 points are collinear
     *                     > 0 : the 3 points are in a 'left turn' (counter clockwise)
     *                     < 0 : the 3 points are in a 'right turn' (clockwise)
     */
    function ccw(p1, p2, p3) {
        return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0]);
    }

    /**
     * Subroutine to invert the Y coord of the screen
     *
     * @param {number} oldY - the Y value of the pixel. Point (0, 0) is at the left top place
     * @param {number} y - a simple 2d point [x2, y2]
     * @returns {number} - the new value of Y. Point (0, 0) is at the left bootom place
     */
    function invY(oldY) {
        return(SCREEN_HEIGHT - INTERFACE_HEIGHT - oldY);
    }

}